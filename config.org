* Sensible Defaults
  Any customization of built-in Emacs features goes in here.

  #+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
  #+END_SRC
* Startup
  Startup behaviour

  #+BEGIN_SRC
  ;;start on eshell
  ;(add-hook 'emacs-startup-hook 'eshell)

  ;; fullscreen by default
  (defun fullscreen ()
         (interactive)
         (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
  			      '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
  (fullscreen)
  #+END_SRC
* Theme
   #+BEGIN_SRC emacs-lisp
   (use-package nord-theme
     :config (load-theme 'nord t)
             (setq nord-comment-brightness 20))
   #+END_SRC
* Pdf Tools
   #+BEGIN_SRC
   ;; not use if this is enough..
   (use-package pdf-tools)
   ;; maybe I need this...
   (pdf-tools-install)
#+END_SRC
* Python
#+BEGIN_SRC
(use-package elpy
  :config (elpy-enable))

(use-package ein)

(setenv "IPY_TEST_SIMPLE_PROMPT" "1")
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "console --simple-prompt"
      python-shell-prompt-detect-failure-warning nil)
(add-to-list 'python-shell-completion-native-disabled-interpreters
             "jupyter")

;; use flycheck not flymake with elpy
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

;; enable autopep8 formatting on save
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
* Org
#+BEGIN_SRC
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(set-fontset-font "fontset-default" nil
                  (font-spec :size 20 :name "Symbola"))
(setq org-ellipsis " ⬎")
;; ⤵ ▼ ↴ ⬎

(setq org-todo-keywords
  '((sequence "TODO" "WAITING" "|" "DONE")))
#+END_SRC
* ivy (replaces ido and anzu)
#+BEGIN_SRC
(use-package counsel)
#+END_SRC
* Company mode
#+BEGIN_SRC
(require 'auto-complete)
(global-auto-complete-mode t)

(defun auto-complete-mode-maybe ()
  "No maybe for you. Only AC!"
  (unless (minibufferp (current-buffer))
    (auto-complete-mode 1)))
#+END_SRC
* eww bug
#+BEGIN_SRC
(define-advice shr-parse-image-data (:around (fn &rest args) my-emacs-25-patch)
  "Hackaround for bug#24111 in Emacs 25."
  (if shr-blocked-images
      (apply fn args)
    (cl-letf (((symbol-function 'libxml-parse-xml-region) #'buffer-substring)
              ((symbol-function 'shr-dom-to-xml)          #'identity))
      (apply fn args))))
#+END_SRC
* shell
#+BEGIN_SRC
(eval-after-load 'comint
  '(progn
     ;; originally on C-c M-r and C-c M-s
     (define-key comint-mode-map (kbd "M-p") #'comint-previous-matching-input-from-input)
     (define-key comint-mode-map (kbd "M-n") #'comint-next-matching-input-from-input)
     ;; originally on M-p and M-n
     (define-key comint-mode-map (kbd "C-c M-r") #'comint-previous-input)
     (define-key comint-mode-map (kbd "C-c M-s") #'comint-next-input)))
#+END_SRC
* eshell
#+BEGIN_SRC
(add-hook
 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nik)))
#+END_SRC
