This is based on the following config files:
[[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
[[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]

* About me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "André Alexandre Gomes"
        user-mail-address "up201106482@fc.up.pt")
#+END_SRC
* Sensible Defaults
Any customization of built-in Emacs features goes in here.

#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/sensible-defaults.el")
(sensible-defaults/use-all-settings)
(sensible-defaults/use-all-keybindings)
(sensible-defaults/backup-to-temp-directory)
#+END_SRC
* Startup
Startup behaviour

#+BEGIN_SRC emacs-lisp
;;start on eshell
;(add-hook 'emacs-startup-hook 'eshell)

;; fullscreen by default
(defun fullscreen ()
       (interactive)
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			      '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
(fullscreen)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :config (load-theme 'nord t)
          (setq nord-comment-brightness 20))
#+END_SRC
* Pdf Tools
  I like this for pdf.
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :config (elpy-enable))

  (use-package ein)

  (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC
* Org
** Basic Stuff

#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin gnu

    :config
    (set-fontset-font "fontset-default" nil (font-spec :size 20 :name "Symbola"))
    (setq org-ellipsis " ⬎")

    (setq org-todo-keywords '((sequence "TODO" "WAITING" "|" "DONE")))

    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window))

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** TODO Babel to run source code
* ivy (replaces ido and anzu)
#+BEGIN_SRC emacs-lisp
(use-package counsel)
#+END_SRC
* Company mode
  Basic company mode config.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config ((global-company-mode t)
             (setq company-idle-delay 0)
             (setq company-minimum-prefix-length 3)
             (define-key company-active-map (kbd "<tab>") 'company-complete-selection)
             (define-key company-active-map (kbd "C-s") 'company-select-next)
             (define-key company-active-map (kbd "C-r") 'company-select-previous))
)
#+END_SRC
* eww bug
  Solves the problem of not rendering Latex properly in eww mode.
#+BEGIN_SRC emacs-lisp
(define-advice shr-parse-image-data (:around (fn &rest args) my-emacs-25-patch)
  "Hackaround for bug#24111 in Emacs 25."
  (if shr-blocked-images
      (apply fn args)
    (cl-letf (((symbol-function 'libxml-parse-xml-region) #'buffer-substring)
              ((symbol-function 'shr-dom-to-xml)          #'identity))
      (apply fn args))))
#+END_SRC
* shell and eshell
  Make M-n and M-p more intelligent in shell.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'comint
  '(progn
     ;; originally on C-c M-r and C-c M-s
     (define-key comint-mode-map (kbd "M-p") #'comint-previous-matching-input-from-input)
     (define-key comint-mode-map (kbd "M-n") #'comint-next-matching-input-from-input)
     ;; originally on M-p and M-n
     (define-key comint-mode-map (kbd "C-c M-r") #'comint-previous-input)
     (define-key comint-mode-map (kbd "C-c M-s") #'comint-next-input)))
#+END_SRC

  I want eshell to behave like a typical terminal, i.e. I don't want tab to
  cycle through different options.

#+BEGIN_SRC emacs-lisp
(add-hook
 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))
#+END_SRC
