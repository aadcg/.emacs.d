This is based on the following config files:
- [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
- [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]

#+BEGIN_SRC emacs-lisp
(version)
#+END_SRC
#+RESULTS:
: GNU Emacs 25.2.2 (x86_64-pc-linux-gnu, GTK+ Version 3.22.21)
:  of 2017-09-22, modified by Debian

#+BEGIN_SRC emacs-lisp
(org-version)
#+END_SRC
#+RESULTS:
: 9.1.14

* About me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "André Alexandre Gomes"
        user-mail-address "up201106482@fc.up.pt")
#+END_SRC
* Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t)
#+END_SRC
* Built-in defaults
** Here's a bunch of built-in stuff that I prefer by default.
*** Words, whitespaces and text
    - Get rid of trailing whitespaces when a file is saved
    - Treat CamelCaseSubWords as separate words in programming stuff
    - Overwrite selected text
    - Append a newline to the end of a file by default
    - Set nr of characters per line and enforce it
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'delete-trailing-whitespace)
      (add-hook 'prog-mode-hook 'subword-mode)
      (delete-selection-mode t)
      (setq require-final-newline t)
      (setq-default fill-column 80)
      (add-hook 'text-mode-hook 'turn-on-auto-fill)
    #+END_SRC
*** Aesthetics, line numbering and matching parenthesis
    - Hide startup stuff, hide bars, and simplify yes/no to y/n
    - Show matching parenthesis
    - Number lines in texty stuff
    - Highlight current line
    - Dired as 'ls -Alh'
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
      (setq initial-scratch-message nil)
      (tool-bar-mode -1)
      ;; (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (horizontal-scroll-bar-mode -1)
      (fset 'yes-or-no-p 'y-or-n-p)

      (show-paren-mode t)
      (setq show-paren-delay 0.0)
      (add-hook 'prog-mode-hook 'linum-mode)
      (add-hook 'text-mode-hook 'linum-mode)
      (global-hl-line-mode)
      (setq-default dired-listing-switches "-Alh")
    #+END_SRC
*** Cursor
    - Preserves cursor position after page up/down
    - Preserves cursor position after closing a file
    #+BEGIN_SRC emacs-lisp
      (setq scroll-preserve-screen-position 'always)
      (save-place-mode 1)
    #+END_SRC
*** Windows and buffers
    - Automatically revert buffer is smth changed
    - Killing a buffer also kills the window
    - Navigating buffers with S-<arrows>
    #+BEGIN_SRC emacs-lisp
      (global-auto-revert-mode t)
      (substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
      (windmove-default-keybindings)
      (setq windmove-wrap-around t)
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (defun reset-text-size ()
        (interactive)
        (text-scale-set 0))

      (define-key global-map (kbd "C-0") 'reset-text-size)
      (define-key global-map (kbd "C-+") 'text-scale-increase)
      (define-key global-map (kbd "C--") 'text-scale-decrease)
      (global-set-key (kbd "C-x C-b") 'ibuffer)
   #+END_SRC
*** Backups
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist
              `((".*" . ,temporary-file-directory)))
      (setq auto-save-file-name-transforms
              `((".*" ,temporary-file-directory t)))
    #+END_SRC
* Startup
  Startup behaviour
#+BEGIN_SRC emacs-lisp
;;start on eshell
;(add-hook 'emacs-startup-hook 'eshell)

;; fullscreen by default
(defun fullscreen ()
       (interactive)
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
			      '(2 "_NET_WM_STATE_FULLSCREEN" 0)))
(fullscreen)
#+END_SRC
* Theme
#+BEGIN_SRC emacs-lisp
(use-package nord-theme
  :ensure t
  :config (load-theme 'nord t)
          (setq nord-comment-brightness 20))
#+END_SRC
* Pdf Tools
  I like this for pdf.
  How to enable midnight by default?

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config (pdf-tools-install)
    :hook pdf-view-midnight-minor-mode)
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
* Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config (elpy-enable))

  (use-package ein
    :ensure t)

  (setenv "IPY_TEST_SIMPLE_PROMPT" "1")
  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "console --simple-prompt"
        python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
               "jupyter")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (use-package py-autopep8
    :ensure t)

  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
#+END_SRC

#+RESULTS:
| py-autopep8-enable-on-save |

* Org
** Basic Stuff

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :pin gnu
    :config
    (set-fontset-font "fontset-default" nil (font-spec :size 20 :name "Symbola"))
    (setq org-ellipsis " ⬎")

    (setq org-todo-keywords '((sequence "TODO" "WAITING" "|" "DONE")))

    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-confirm-babel-evaluate nil)

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t))))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** TODO Why doesn't it evaluate python code?
** TODO Let Latex take care of russian
** TODO Org subtree presentation
* Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-extra-directories ()))

  (use-package swiper
    :ensure t
    :bind
    ("C-s" . swiper)
    ("C-r" . swiper))
#+END_SRC
* Company mode
  Basic company mode config.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode t)
            (setq company-idle-delay 0)
            (setq company-minimum-prefix-length 3)
            (define-key company-active-map (kbd "<tab>") 'company-complete))
#+END_SRC
* eww bug
  Solves the problem of not rendering Latex properly in eww mode.
#+BEGIN_SRC emacs-lisp
(define-advice shr-parse-image-data (:around (fn &rest args) my-emacs-25-patch)
  "Hackaround for bug#24111 in Emacs 25."
  (if shr-blocked-images
      (apply fn args)
    (cl-letf (((symbol-function 'libxml-parse-xml-region) #'buffer-substring)
              ((symbol-function 'shr-dom-to-xml)          #'identity))
      (apply fn args))))
#+END_SRC
* shell and eshell
  Make M-n and M-p more intelligent in shell.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'comint
  '(progn
     ;; originally on C-c M-r and C-c M-s
     (define-key comint-mode-map (kbd "M-p") #'comint-previous-matching-input-from-input)
     (define-key comint-mode-map (kbd "M-n") #'comint-next-matching-input-from-input)
     ;; originally on M-p and M-n
     (define-key comint-mode-map (kbd "C-c M-r") #'comint-previous-input)
     (define-key comint-mode-map (kbd "C-c M-s") #'comint-next-input)))
#+END_SRC

  I want eshell to behave like a typical terminal, i.e. I don't want tab to
  cycle through different options.

#+BEGIN_SRC emacs-lisp
(add-hook
 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))
#+END_SRC
