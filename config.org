#+TITLE: GNU Emacs config
#+OPTIONS: num:nil toc:nil email:t
#+LATEX_HEADER: \usepackage[margin=1.2cm]{geometry}
#+PROPERTY: header-args :results silent

* Meta
:PROPERTIES:
:EMACS_VERSION: 26.2 (GTK+)
:ORG_VERSION: 9.2.3
:END:
** Me
#+begin_src emacs-lisp
  (setq user-full-name "André Alexandre Gomes"
        user-mail-address "up201106482@fc.up.pt"
        calendar-latitude 41.16
        calendar-longitude -8.63
        calendar-location-name "Porto, PT")
#+end_src

** Config
#+begin_src emacs-lisp
  (defun config-visit ()
    "Visits ~/.emacs.d/config.org."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime."
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

* My defaults
** Words, white spaces and text
- Get rid of trailing whitespaces when a file is saved
- Treat CamelCaseSubWords as separate words
- Overwrite selected text
- Append a newline to the end of a file by default
- 80 chars per line
- Spaces over tabs
- visual-line-mode if non-GUI (I only use the non-GUI emacs on my android phone)

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (global-subword-mode t)
  (delete-selection-mode t)
  (setq require-final-newline t)
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default indent-tabs-mode nil)
  (unless window-system (global-visual-line-mode t))
#+end_src

** Cursor
- Preserve cursor position after C-v or M-v
- Preserve cursor position after closing a file
- No blinking cursor

#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position 'always)
  (save-place-mode 1)
  (when window-system
    (setq blink-cursor-mode nil))
#+end_src

** Windows and buffers
- Automatically revert buffers
- Killing a buffer also kills the window

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
  (setq auto-revert-remote-files t)
  (substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
#+end_src

** Backups
Backups and auto-save files at ~/.emacs/backups

#+begin_src emacs-lisp
  (setq temporary-file-directory (concat user-emacs-directory "backups/")
        backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (defun reset-text-size ()
    (interactive)
    (text-scale-set 0))

  (defun switch-to-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*"))

  (global-set-key (kbd "C-0")     'reset-text-size)
  (global-set-key (kbd "C-+")     'text-scale-increase)
  (global-set-key (kbd "C--")     'text-scale-decrease)
  (global-set-key (kbd "M-g")     'goto-line)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "M-%")     'query-replace-regexp)
  (global-set-key (kbd "<f5>")    'revert-buffer)
  (global-set-key (kbd "C-M-r")   'eval-buffer)
  (global-set-key (kbd "C-x w")   'eww)
  (global-set-key (kbd "S-SPC")   'cycle-spacing)
  (global-set-key (kbd "M-SPC")   'other-window)
  (global-set-key (kbd "C-c f")   'switch-to-agenda)
  (global-set-key (kbd "M-o")     'mode-line-other-buffer)
#+end_src

** Browser
#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src

** Aesthetics
- Hide startup stuff, hide bars, and simplify yes/no to y/n
- Show matching parenthesis
- Number lines while programming
- Highlight current line
- Dired as 'ls -Atlh'

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message nil)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq show-paren-delay 0.0)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (column-number-mode)
  (setq-default dired-listing-switches "-Atlh")
  (setq dired-auto-revert-buffer t)
  (menu-bar-mode -1)
  (when window-system
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (horizontal-scroll-bar-mode -1)
    (global-hl-line-mode))
#+end_src

** Regional
*** Input Method
#+begin_src emacs-lisp
  (setq default-input-method "russian-computer")
#+end_src

*** Calendar
#+begin_src emacs-lisp
  (setq calendar-week-start-day 1)
#+end_src

*** Clock
[[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones][Time Zones]]
#+begin_src emacs-lisp
  (setq display-time-24hr-format t
        display-time-format "%k:%M %a %d %b"
        display-time-default-load-average nil
        display-time-world-list '(("Europe/Moscow" "Москва")
                                  ("Europe/Lisbon" "Lisboa")))
  (display-time-mode 1)
#+end_src

*** Holidays
#+begin_src emacs-lisp
    (setq holiday-bahai-holidays nil
          holiday-oriental-holidays nil
          holiday-islamic-holidays nil
          holiday-hebrew-holidays nil
          holiday-christian-holidays nil

          holiday-general-holidays
          '(;; Portuguese Public Holidays
            (holiday-fixed 1 1 "Ano Novo")
            (holiday-easter-etc -47 "Carnaval")
            (holiday-easter-etc -2 "Sexta-feira Santa")
            (holiday-easter-etc 0 "Domingo de Páscoa")
            (holiday-fixed 3 19 "Dia do Pai")
            (holiday-fixed 4 25 "Dia da Liberdade")
            (holiday-fixed 5 1 "Dia do Trabalhador")
            (holiday-easter-etc +60 "Corpo de Deus")
            (holiday-float 5 0 1 "Dia da Mãe")
            (holiday-fixed 6 10 "Dia de Portugal, de Camões e das Comunidades Portuguesas")
            (holiday-fixed 8 15 "Assunção de Nossa Senhora")
            (holiday-fixed 10 5 "Implantação da República")
            (holiday-fixed 11 1 "Dia de Todos-os-Santos")
            (holiday-fixed 12 1 "Restauração da Independência")
            (holiday-fixed 12 8 "Imaculada Conceição")
            (holiday-fixed 12 25 "Natal")

            ;; Russian Public Holidays
            (holiday-fixed 1 1 "Новый год")
            (holiday-fixed 1 2 "Новогодние каникулы")
            (holiday-fixed 1 3 "Новогодние каникулы")
            (holiday-fixed 1 4 "Новогодние каникулы")
            (holiday-fixed 1 5 "Новогодние каникулы")
            (holiday-fixed 1 6 "Новогодние каникулы")
            (holiday-fixed 1 7 "Рождество Христово")
            (holiday-fixed 1 8 "Новогодние каникулы")
            (holiday-fixed 2 23 "День защитника Отечества")
            (holiday-fixed 3 8 "Международный женский день")
            (holiday-fixed 5 1 "Праздник Весны и Труда")
            (holiday-fixed 5 9 "День Победы")
            (holiday-fixed 6 12 "День России")
            (holiday-fixed 11 4 "День народного единства")

            ;; American Public Holidays
            ;; (holiday-float 1 1 3 "Martin Luther King Day")
            ;; (holiday-fixed 2 2 "Groundhog Day")
            (holiday-fixed 2 14 "Valentine's Day")
            ;; (holiday-float 2 1 3 "President's Day")
            ;; (holiday-fixed 3 17 "St. Patrick's Day")
            (holiday-fixed 4 1 "April Fools' Day")
            ;; (holiday-float 5 0 2 "Mother's Day")
            ;; (holiday-float 5 1 -1 "Memorial Day")
            ;; (holiday-fixed 6 14 "Flag Day")
            ;; (holiday-float 6 0 3 "Father's Day")
            ;; (holiday-fixed 7 4 "Independence Day")
            ;; (holiday-float 9 1 1 "Labor Day")
            ;; (holiday-float 10 1 2 "Columbus Day")
            (holiday-fixed 10 31 "Halloween")
            ;; (holiday-fixed 11 11 "Veteran's Day")
            ;; (holiday-float 11 4 4 "Thanksgiving")
            )

          holiday-other-holidays
          '(;; Days Off for 2019
            (holiday-fixed 12 24 "Day Off")
            (holiday-fixed 12 26 "Day Off")

            ;; Company Holidays for 2019
            (holiday-fixed 6 25 "Company Holiday")
            (holiday-fixed 6 26 "Company Holiday")
            (holiday-fixed 6 27 "Company Holiday")
            (holiday-fixed 6 28 "Company Holiday")
            (holiday-fixed 7 9 "Company Holiday")
            (holiday-fixed 7 10 "Company Holiday")
            (holiday-fixed 7 11 "Company Holiday")
            (holiday-fixed 7 12 "Company Holiday")
            (holiday-fixed 7 15 "Company Holiday")
            (holiday-fixed 7 16 "Company Holiday")
            (holiday-fixed 7 17 "Company Holiday")
            (holiday-fixed 7 18 "Company Holiday")
            (holiday-fixed 7 19 "Company Holiday"))

          holiday-local-holidays
          '(;; Porto, PT
            (holiday-fixed 6 24 "Dia de São João")))
#+end_src
* Org
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " §"
          org-goto-interface 'outline-path-completion
          org-goto-max-level 10
          org-startup-indented t
          org-startup-with-inline-images t
          org-image-actual-width 500
          org-hide-leading-stars t
          org-special-ctrl-a/e t
          org-special-ctrl-k t
          org-return-follows-link t
          org-cycle-include-plain-lists 'integrate
          org-directory "~/NextCloud/org/"
          org-agenda-files '("~/NextCloud/org")
          org-refile-targets '((org-agenda-files :maxlevel . 5))
          org-refile-allow-creating-parent-nodes t
          org-agenda-skip-deadline-prewarning-if-scheduled t
          org-agenda-include-diary t
          org-agenda-span 10
          org-agenda-start-on-weekday nil
          org-todo-keywords '((sequence "TODO(t!)"
                                        "WIP(s!)"
                                        "WAITING(w@)"
                                        "|"
                                        "DONE(d!)"
                                        "NOT TODO(n@)"
                                        "CANCELED(c@)"))
          org-todo-keyword-faces '(("WIP" . "orange")
                                   ("WAITING" . "yellow"))
          org-src-fontify-natively t
          org-src-tab-acts-natively t
          org-src-window-setup 'current-window
          org-export-use-babel nil
          org-confirm-babel-evaluate nil
          org-highlight-latex-and-related (quote (latex script entities))
          org-format-latex-options
          (quote (:foreground default :background default :scale 2.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers
                              ("begin" "$1" "$" "$$" "\\(" "\\[")))
          orgtbl-mode t)
    (custom-set-faces '(org-ellipsis ((t (:foreground "gray70" :underline nil)))))
    (require 'org-tempo)
    (require 'ox-beamer)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("hk" . "src haskell"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("co" . "comment"))

    :bind
    ("\C-ca" . org-agenda)
    ("\C-cl" . org-store-link)
    ("\C-cc" . org-capture)
    ("C-c i" . org-time-stamp-inactive)
    ("C-c j" . aadcg/org-checkbox-next))
#+end_src

#+begin_src emacs-lisp
  (defun aadcg/org-checkbox-next ()
    "Mark checkboxes and sort"
    (interactive)
    (let ((home (point)))
      (when (org-at-item-checkbox-p)
        (org-toggle-checkbox)
        (org-sort-list nil ?x))
      (goto-char home)))

  (setq exec-path (append exec-path '("/usr/bin/tex")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python     . t)
     (latex      . t)
     (shell      . t)
     (emacs-lisp . t)
     (ditaa      . t)))

  (when window-system
    (use-package org-pdfview))

  (use-package cdlatex
    :config
    (org-cdlatex-mode))

  (use-package org-tree-slide
    :config
    (setq org-tree-slide-slide-in-effect nil
          org-tree-slide-heading-emphasis t
          org-tree-slide-activate-message "Welcome to my presentation!"
          org-tree-slide-deactivate-message "Hope you have enjoyed!")
    :hook
    ((org-tree-slide-play . aadcg/presenting)
     (org-tree-slide-stop . aadcg/working)
     (org-tree-slide-play . global-command-log-mode)
     (org-tree-slide-stop . global-command-log-mode))
    :bind
    ("<f8>" . org-tree-slide-mode)
    ("<f7>" . org-tree-slide-play-with-timer))

  (defun aadcg/presenting ()
    "Select a light theme suitable for a presentation."
    (interactive)
    (disable-theme 'zenburn)
    (load-theme 'doneburn t)
    (transparency 100)
    (display-time-mode 0)
    (column-number-mode 0)
    (line-number-mode 0)
    (display-battery-mode 0)
    (text-scale-increase 4)
    (variable-pitch-mode))

  (defun aadcg/working ()
    "Select my favourite production theme."
    (interactive)
    (disable-theme 'doneburn)
    (load-theme 'zenburn t)
    (transparency 90)
    (display-time-mode 1)
    (column-number-mode 1)
    (line-number-mode 1)
    (display-battery-mode 1)
    (reset-text-size)
    (variable-pitch-mode)
    (delete-other-windows))
#+end_src

* Programming
** Python
#+begin_src emacs-lisp
  (use-package elpy
    :init
    (elpy-enable)
    :config
    (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt"
          pyvenv-mode-line-indicator nil
          pyvenv-activate "~/anaconda3")
    :bind
    ("C-c p". elpy-autopep8-fix-code)
    ("C-c b". elpy-black-fix-code))

  (use-package company-jedi
    :config
    (add-to-list 'company-backends 'company-jedi))

  (use-package ein)

  (add-hook 'python-mode-hook (lambda ()
                                (require 'sphinx-doc)
                                (sphinx-doc-mode t)))

  (add-hook 'python-mode-hook
            (setq-default electric-indent-inhibit t))
#+end_src

** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode)

  (add-hook 'haskell-mode-hook
            (lambda ()
              (haskell-doc-mode)
              (turn-on-haskell-indent)))
#+end_src

** \LaTeX
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t)
    (setq-default TeX-master nil))
#+end_src

** Bash
*** Shell
Make M-n and M-p more intelligent in shell.

#+begin_src emacs-lisp
  (eval-after-load 'comint
    '(progn
       ;; originally on C-c M-r and C-c M-s
       (define-key comint-mode-map (kbd "M-p") #'comint-previous-matching-input-from-input)
       (define-key comint-mode-map (kbd "M-n") #'comint-next-matching-input-from-input)
       ;; originally on M-p and M-n
       (define-key comint-mode-map (kbd "C-c M-r") #'comint-previous-input)
       (define-key comint-mode-map (kbd "C-c M-s") #'comint-next-input)))
#+end_src

*** Eshell
I want eshell to behave like a typical terminal, i.e. I don't want tab to
cycle through different options.

#+begin_src emacs-lisp
(add-hook 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))
#+end_src

Ivy in Eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
    (lambda ()
      (define-key eshell-mode-map (kbd "<M-tab>") nil)
      (define-key eshell-mode-map (kbd "<tab>")
        (lambda () (interactive) (completion-at-point)))))
#+end_src

#+begin_src emacs-lisp
  (setq eshell-history-file-name "~/.bash_history"
        eshell-history-size 9999)
#+end_src

** JS
#+begin_src emacs-lisp
  ;; (add-hook 'js-mode-hook 'json-pretty-print-buffer-ordered)
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-display-buffer-function
          (quote magit-display-buffer-same-window-except-diff-v1))
    :bind
    ("C-x g" . magit-status))
#+end_src

** Highlight uncommitted changes
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+end_src

** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

** CSV
#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

* Miscellaneous
** Checking
*** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t))
#+end_src

*** Flyspell
#+begin_src emacs-lisp
  (when window-system
    (use-package flyspell
      :config
      (flyspell-prog-mode)
      (when org-mode-hook
        (flyspell-mode-off))))
#+end_src

** PDF
#+begin_src emacs-lisp
  (when window-system
    (use-package pdf-tools
      :config
      (pdf-tools-install)
      (setq pdf-view-midnight-colors '("#d2c8c8" . "#3F3F3F"))
      :hook
      (pdf-tools-enabled . pdf-view-midnight-minor-mode)
      (pdf-tools-enabled . pdf-view-auto-slice-minor-mode)
      (pdf-tools-enabled . pdf-view-fit-height-to-window)))
#+end_src

** Parenthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-strict-mode)
    (show-smartparens-global-mode)
    (sp-local-pair 'org-mode "$$" "$$"))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind ("C-r" . avy-goto-word-1))
#+end_src

** Emacs completion
#+begin_src emacs-lisp
    (use-package counsel
      :config
      (setq ivy-use-virtual-buffers t
            ivy-count-format "(%d/%d) "
            ivy-wrap t
            ivy-extra-directories nil
            ivy-initial-inputs-alist nil
            ivy-format-function 'ivy-format-function-arrow)
      (when window-system
        (setq ivy-height 25))

      :bind
      ("C-x B" . ivy-switch-buffer-other-window)
      ("C-s" . swiper))

    (ivy-mode 1)
    (counsel-mode)
#+end_src

** Auto-complete
#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode t)
    (setq company-idle-delay 0.1
          company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "C-j") 'company-complete-selection)
    (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src

** YouTube
#+begin_src emacs-lisp
  (defun youtube-dl ()
    (interactive)
    (let* ((str (current-kill 0))
           (default-directory "~/Downloads")
           (proc (get-buffer-process (ansi-term "/bin/bash"))))
      (term-send-string
       proc
       (concat "cd ~/Downloads && youtube-dl " str "\n"))))
#+end_src

** Games
#+begin_src emacs-lisp
  (use-package typit)
#+end_src

** Command log
#+begin_src emacs-lisp :results sillent
  (use-package command-log-mode
    :config
    (setq command-log-mode-window-size 38
          command-log-mode-auto-show t))
#+end_src

** EXWM
#+begin_src emacs-lisp
  (use-package xelb)

  (use-package exwm)
#+end_src

* Aesthetics
Config [[https://www.emacswiki.org/emacs/ModeLineConfiguration][mode line]]
** Theme
#+begin_src emacs-lisp
  (defun transparency (value)
    "Sets the transparency of the frame window. 0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (global-set-key (kbd "C-x t") 'transparency)

  (when window-system
    (use-package zenburn-theme
      :init
      (setq zenburn-scale-org-headlines t)
      (load-theme 'zenburn t)
      (transparency 90))

    (use-package doneburn-theme
      :defer t))
#+end_src

** Modeline
#+begin_src emacs-lisp
  (when window-system
    (use-package moody
      :config
      (setq moody-mode-line-height 25
            x-underline-at-descent-line t)
      (moody-replace-mode-line-buffer-identification)
      (moody-replace-vc-mode)))
#+end_src

#+begin_src emacs-lisp
  (when window-system
    (display-battery-mode))
#+end_src

** Minions
#+begin_src emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))
#+end_src

** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq org-bullets-bullet-list '("◉" "○")))
#+end_src

** Pretty mode
#+begin_src emacs-lisp
  (use-package pretty-mode
    :config
    (require 'pretty-mode)
    (global-pretty-mode t)
    (pretty-activate-groups
     '(:sub-and-superscripts :greek :arithmetic-nary :quantifiers)))
#+end_src

** Beacon
#+begin_src emacs-lisp
  (when window-system
    (use-package beacon
    :config
    (beacon-mode 1)
    (setq beacon-blink-when-window-scrolls nil)))
#+end_src

** Htmlize
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

** Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

* TODO Improvements
** TODO Org export Latex russian

** TODO Create repo with portuguese holidays
[[https://blog.aaronbieber.com/2015/08/04/authoring-emacs-packages.html][how to]]

** TODO term, ansi-term, shell and eshell
- [[https://emacs.stackexchange.com/questions/2101/terminal-is-not-fully-functional-over-ssh-in-a-shell-buffer][link1]]
- [[https://emacs.stackexchange.com/questions/27/how-can-i-use-my-local-emacs-client-as-the-editor-for-remote-machines-i-access/893#893][link2]]
- [[https://emacs.stackexchange.com/questions/241/what-are-all-the-ways-of-launching-a-shell-from-inside-emacs-and-what-are-their][link3]]
- [[https://emacs.stackexchange.com/questions/241/what-are-all-the-ways-of-launching-a-shell-from-inside-emacs-and-what-are-their/242#242][link4]]

** TODO add personal holidays in a private file

** TODO Emacs OS
- State "TODO"       from              [2019-05-12 Sun 15:20]

- [ ] Install Arch Linux
- [ ] EXWM
- [ ] Email (mu4e + mbsync?)
- [ ] Syncthing

* Startup
#+begin_src emacs-lisp
  (defun fullscreen ()
    (interactive)
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                           '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

  (when window-system
    (fullscreen))

  (add-hook 'emacs-startup-hook 'org-agenda-list 1)
#+end_src

* Thanks
- [[https://github.com/BigNaNet/emacs][BigNaNet]]
- [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
- [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]
- [[https://github.com/daedreth/UncleDavesEmacs][Dawid Eckert]]
