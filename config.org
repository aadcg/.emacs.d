#+TITLE: GNU Emacs config
#+OPTIONS: num:nil toc:nil email:t
#+LATEX_HEADER: \usepackage[margin=1.2cm]{geometry}

* Meta
:PROPERTIES:
:EMACS_VERSION: 26.1 (GTK+)
:ORG_VERSION: 9.1.9
:END:
** Me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "André Alexandre Gomes"
        user-mail-address "up201106482@fc.up.pt"
        calendar-latitude 41.16
        calendar-longitude -8.63
        calendar-location-name "Porto, PT")
#+END_SRC
** Config
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* My defaults
Here's a bunch of built-in stuff that I prefer by default.
** Words, whitespaces and text
- Get rid of trailing whitespaces when a file is saved
- Treat CamelCaseSubWords as separate words
- Overwrite selected text
- Append a newline to the end of a file by default
- Set nr of characters per line and enforce it
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (global-subword-mode t)
  (delete-selection-mode t)
  (setq require-final-newline t)
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC
** Cursor
- Preserves cursor position after page up/down
- Preserves cursor position after closing a file
#+BEGIN_SRC emacs-lisp
  (setq scroll-preserve-screen-position 'always)
  (save-place-mode 1)
#+END_SRC
** Windows and buffers
- Automatically revert buffer if smth changed
- Killing a buffer also kills the window
- Navigating buffers with S-<arrows>
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
  (substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp
  (defun reset-text-size ()
    (interactive)
    (text-scale-set 0))

  (defun switch-to-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*"))

  (global-set-key (kbd "C-0") 'reset-text-size)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "M-g") 'goto-line)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x p") 'switch-to-prev-buffer)
  (global-set-key (kbd "C-x n") 'switch-to-next-buffer)
  (global-set-key (kbd "M-%") 'query-replace-regexp)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "C-M-r") 'eval-buffer)
  (global-set-key (kbd "C-x w") 'eww)
  (global-set-key (kbd "S-SPC") 'just-one-space)
  (global-set-key (kbd "M-SPC") 'other-window)
  (global-set-key (kbd "C-c f") 'switch-to-agenda)
#+END_SRC
** Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t)))
#+END_SRC
** Input Method
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "russian-computer")
#+END_SRC
** Clock
[[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones][Time Zones]]
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%k:%M %a %d %b")
  (setq display-time-default-load-average nil)
  (display-time-mode 1)

  (setq display-time-world-list
        '(("Europe/Moscow" "Москва")
          ("Europe/Lisbon" "Lisboa")))
#+END_SRC
** Holidays
#+BEGIN_SRC emacs-lisp
  (setq holiday-bahai-holidays nil)
  (setq holiday-oriental-holidays nil)
  (setq holiday-islamic-holidays nil)
  (setq holiday-hebrew-holidays nil)

  (setq holiday-general-holidays
        '(
          ;; Portuguese Public Holidays
          (holiday-fixed 3 19 "Dia do Pai")
          (holiday-fixed 4 25 "Dia da Liberdade")
          (holiday-fixed 5 1 "Dia do Trabalhador")
          (holiday-float 5 0 1 "Dia da Mãe")
          (holiday-fixed 6 10 "Dia de Portugal, de Camões e das Comunidades Portuguesas")
          (holiday-fixed 10 5 "Implantação da República")
          (holiday-fixed 12 1 "Restauração da Independência (1580-1640)")

          ;; Russian Public Holidays
          (holiday-fixed 1 1 "Новый год")
          (holiday-fixed 1 2 "Новогодние каникулы")
          (holiday-fixed 1 3 "Новогодние каникулы")
          (holiday-fixed 1 4 "Новогодние каникулы")
          (holiday-fixed 1 5 "Новогодние каникулы")
          (holiday-fixed 1 6 "Новогодние каникулы")
          (holiday-fixed 1 7 "Рождество Христово")
          (holiday-fixed 1 8 "Новогодние каникулы")
          (holiday-fixed 2 23 "День защитника Отечества")
          (holiday-fixed 3 8 "Международный женский день")
          (holiday-fixed 5 1 "Праздник Весны и Труда")
          (holiday-fixed 5 9 "День Победы")
          (holiday-fixed 6 12 "День России")
          (holiday-fixed 11 4 "День народного единства")

          ;; American Public Holidays
          ;; (holiday-float 1 1 3 "Martin Luther King Day")
          ;; (holiday-fixed 2 2 "Groundhog Day")
          (holiday-fixed 2 14 "Valentine's Day")
          ;; (holiday-float 2 1 3 "President's Day")
          ;; (holiday-fixed 3 17 "St. Patrick's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          ;; (holiday-float 5 0 2 "Mother's Day")
          ;; (holiday-float 5 1 -1 "Memorial Day")
          ;; (holiday-fixed 6 14 "Flag Day")
          ;; (holiday-float 6 0 3 "Father's Day")
          ;; (holiday-fixed 7 4 "Independence Day")
          ;; (holiday-float 9 1 1 "Labor Day")
          ;; (holiday-float 10 1 2 "Columbus Day")
          (holiday-fixed 10 31 "Halloween")
          ;; (holiday-fixed 11 11 "Veteran's Day")
          ;; (holiday-float 11 4 4 "Thanksgiving")
          ))

  (setq calendar-christian-all-holidays-flag t)
  (setq holiday-christian-holidays
        '((holiday-easter-etc)
         (holiday-fixed 12 25 "Christmas")
         (if calendar-christian-all-holidays-flag
             (append
              (holiday-fixed 8 15 "Assunção de Nossa Senhora")
              (holiday-fixed 11 1 "Dia de Todos-os-Santos")
              (holiday-fixed 12 8 "Imaculada Conceição")))))

  (setq holiday-local-holidays
        '(;; Porto, PT
          (holiday-fixed 6 24 "Dia de São João")
          ;; Oliveira de Azeméis, PT
          (holiday-float 8 1 2 "Festa de Nossa Senhora de La Salette")
          ;; This is actually wrong. This public holiday is celebrated on Monday
          ;; that follows the second sunday of August
          ))
#+END_SRC
** Browser
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
* Org
** Basic config
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " §")
    ;; (setq org-ellipsis " ⬎")
    (custom-set-faces '(org-ellipsis ((t (:foreground "gray40" :underline nil)))))
    (add-hook 'org-mode-hook 'org-indent-mode)
    (setq orgtbl-mode t)
    (setq org-startup-folded (quote overview))
    (setq org-directory "~/NextCloud/org/")
    (setq org-mobile-directory "~/NextCloud/mobileorg/")
    (setq org-agenda-files '("~/NextCloud/org"))
    (setq org-mobile-files '("~/NextCloud/org"))
    (setq org-mobile-inbox-for-pull "~/NextCloud/org/from-mobile.org")
    (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
    (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
    (setq org-agenda-include-diary t)
    (add-hook 'after-init-hook 'org-mobile-pull)
    (add-hook 'kill-emacs-hook 'org-mobile-push)
    (setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s!)" "WAITING(w@)" "|" "DONE(d!)")))
    (setq org-todo-keyword-faces '(("TODO" . org-warning) ("STARTED" . "yellow") ("WAITING" . "orange")))
    (setq org-src-fontify-natively t)
    (setq org-src-tab-acts-natively t)
    (setq org-src-window-setup 'current-window)
    (setq org-confirm-babel-evaluate nil)
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("hk" . "src haskell"))
    (setq org-highlight-latex-and-related (quote (latex script entities)))
    ;; (add-to-list 'org-structure-template-alist
    ;;              '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
    ;; (add-to-list 'org-structure-template-alist
    ;;              '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
    ;; (add-to-list 'org-structure-template-alist
    ;;              '("ab" "#+BEGIN_abstract \n?\n#+END_abstract"))
    ;; (add-to-list 'org-structure-template-alist
    ;;              '("lx" "#+BEGIN_LaTeX \n?\n#+END_LaTeX"))
    ;; (add-to-list 'org-structure-template-alist
    ;;              '("th" "#+BEGIN_theorem \n?\n#+END_theorem"))
    :bind
    ("\C-ca" . org-agenda)
    ("\C-cl" . org-store-link)
    ("\C-cc" . org-capture)
    ("C-S-c ." . org-time-stamp-inactive))
#+END_SRC

#+RESULTS:
: org-time-stamp-inactive

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/bin/tex")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (latex . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
#+END_SRC
** Org pdftools view
#+BEGIN_SRC emacs-lisp
  (when window-system (use-package org-pdfview))
#+END_SRC
* Programming
** Python
#+BEGIN_SRC emacs-lisp
  (defun drf/append-to-path (path)
    "Add a path both to the $PATH variable and to Emacs' exec-path."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (drf/append-to-path "/home/shady/anaconda3/bin/")

  (use-package elpy
    :config
    (elpy-enable)
    (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "-i --simple-prompt"))

  (use-package company-jedi)
  (add-to-list 'company-backends 'company-jedi)

  ;; (add-hook 'python-mode-hook 'jedi:setup)

  (use-package ein)
  (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)

  ;; (setq python-shell-interpreter "jupyter"
  ;;       python-shell-interpreter-args "console --simple-prompt"
  ;;       python-shell-prompt-detect-failure-warning nil)
  ;; (add-to-list 'python-shell-completion-native-disabled-interpreters
  ;;              "jupyter")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; enable autopep8 formatting on save
  (use-package py-autopep8)

  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

  (add-hook 'python-mode-hook (lambda ()
                                    (require 'sphinx-doc)
                                    (sphinx-doc-mode t)))
#+END_SRC
** Auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil))
#+END_SRC
** Bash
*** Shell
Make M-n and M-p more intelligent in shell.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'comint
  '(progn
     ;; originally on C-c M-r and C-c M-s
     (define-key comint-mode-map (kbd "M-p") #'comint-previous-matching-input-from-input)
     (define-key comint-mode-map (kbd "M-n") #'comint-next-matching-input-from-input)
     ;; originally on M-p and M-n
     (define-key comint-mode-map (kbd "C-c M-r") #'comint-previous-input)
     (define-key comint-mode-map (kbd "C-c M-s") #'comint-next-input)))
#+END_SRC
*** Eshell
I want eshell to behave like a typical terminal, i.e. I don't want tab to
cycle through different options.

#+BEGIN_SRC emacs-lisp
(add-hook 'eshell-mode-hook
 (lambda ()
   (setq pcomplete-cycle-completions nil)))
#+END_SRC

Ivy in Eshell
#+BEGIN_SRC emacs-lisp
  (add-hook 'eshell-mode-hook
    (lambda ()
      (define-key eshell-mode-map (kbd "<M-tab>") nil)
      (define-key eshell-mode-map (kbd "<tab>")
        (lambda () (interactive) (completion-at-point)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq eshell-history-file-name "~/.bash_history")
  (setq eshell-history-size 9999)
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (projectile-mode 1))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-display-buffer-function (quote magit-display-buffer-same-window-except-diff-v1))
    :bind
    ("C-x g" . magit-status))
#+END_SRC
* Miscellaneous
** Checking
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t))
#+END_SRC
*** Flyspell
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package flyspell))

  (when window-system
    (use-package auto-dictionary
    :config (add-hook 'flyspell-mode-hook (lambda () (auto-dictionary-mode 1)))))
#+END_SRC
** Pdf Tools
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package pdf-tools
    :config
    (pdf-tools-install)
    (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
    (setq pdf-view-midnight-colors (quote ("#d2c8c8" . "#283033")))))
#+END_SRC
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-strict-mode))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind ("C-r" . avy-goto-word-1))
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-extra-directories ()))

  (use-package swiper
    :bind
    ("C-s" . swiper))
#+END_SRC
** Company mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode t)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (define-key company-active-map (kbd "C-j") 'company-complete)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
** YouTube
#+BEGIN_SRC emacs-lisp
  (defun youtube-dl ()
    (interactive)
    (let* ((str (current-kill 0))
           (default-directory "~/Downloads")
           (proc (get-buffer-process (ansi-term "/bin/bash"))))
      (term-send-string
       proc
       (concat "cd ~/Downloads && youtube-dl " str "\n"))))
#+END_SRC
* Aesthetics
Config [[https://www.emacswiki.org/emacs/ModeLineConfiguration][mode line]]
** Theme
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package zenburn-theme
    :init
    (load-theme 'zenburn t)))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (when window-system
    (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when window-system (display-battery-mode))
#+END_SRC
** Minions
#+BEGIN_SRC emacs-lisp
(use-package minions
  :config
  (setq minions-mode-line-lighter ""
        minions-mode-line-delimiters '("" . ""))
  (minions-mode 1))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (when window-system
      (use-package org-bullets
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))))
#+END_SRC
** Built-in
- Hide startup stuff, hide bars, and simplify yes/no to y/n
- Show matching parenthesis
- Number lines in texty stuff
- Highlight current line
- Dired as 'ls -Atlh'
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (when window-system (scroll-bar-mode -1))
  (when window-system (horizontal-scroll-bar-mode -1))
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq line-number-mode nil)
  (show-paren-mode t)
  (setq show-paren-delay 0.0)
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'text-mode-hook 'linum-mode)
  (eval-after-load "linum"
    '(set-face-attribute 'linum nil :height 125))
  (when window-system (global-hl-line-mode))
  (setq-default dired-listing-switches "-Atlh")
#+END_SRC
* Startup
#+BEGIN_SRC emacs-lisp
  (defun fullscreen ()
    (interactive)
    (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                           '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

  (when window-system (fullscreen))
  (add-hook 'emacs-startup-hook 'org-agenda-list)
  (delete-other-windows)
#+END_SRC
* TODO Improvements
** TODO Emacs as window manager EXWM
** TODO Email (mu4e)
** TODO Org export Latex russian
** TODO Org subtree presentation
* Thanks
- [[https://github.com/BigNaNet/emacs][BigNaNet]]
- [[https://github.com/zamansky/using-emacs/blob/master/myinit.org][Mike Zamansky]]
- [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][Harry Schwartz]]
- [[https://github.com/daedreth/UncleDavesEmacs][Dawid Eckert]]
