:HEADER:
#+TITLE: GNU Emacs config
#+AUTHOR: André Alexandre Gomes
#+EMAIL: andremegafone@gmail.com
#+PROPERTY: header-args :results silent
:END:

* Defaults, Preferences and Aesthetics
** Personal
#+begin_src emacs-lisp
  (setq user-full-name "André Alexandre Gomes"
        user-mail-address "andremegafone@gmail.com"
        calendar-latitude 41.16
        calendar-longitude -8.63
        calendar-location-name "Porto, Portugal"
        ;; calendar-latitude 59.94
        ;; calendar-longitude 30.31
        ;; calendar-location-name "Санкт-Петербург, Россия"
        )
#+end_src

** Aesthetics
*** UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (fringe-mode '(8 . 0))
  (fset 'yes-or-no-p 'y-or-n-p)

  (setq initial-scratch-message ";; Happy Hacking!\n\n"
        inhibit-startup-screen t)
#+end_src

*** Theme
#+begin_src emacs-lisp
  (defun my-load-theme (theme)
    "Loads theme and changes swaybar if needed."
    (progn
      (mapc #'disable-theme custom-enabled-themes)
      (load-theme theme t)
      (when (getenv "WAYLAND_DISPLAY")
        (my-load-swaybar-theme))))

  (defun my-toggle-modus-theme ()
    "Toggle between `modus-operandi' and `modus-vivendi' themes."
    (interactive)
    (if (eq (frame-parameter nil 'background-mode) 'light)
        (my-load-theme 'modus-vivendi)
      (my-load-theme 'modus-operandi)))

  (defun my-load-swaybar-theme ()
    "Change swaybar colors according to Emacs theme."
    (let ((inhibit-message t)
          (bg (face-attribute 'default :background))
          (fg (face-attribute 'default :foreground))
          (swaycmd "swaymsg bar bar-0 colors "))
      (eshell-command (concat swaycmd "statusline '" fg "'"))
      (eshell-command (concat swaycmd "background '" bg "'"))))

  (defmacro my-format-sexp (sexp &rest objects)
    "All credit to user b3n on Reddit."
    `(eval (read (format ,(format "%S" sexp) ,@objects))))

  (dolist (theme '("operandi" "vivendi"))
    (my-format-sexp
     (use-package modus-%1$s-theme
       :custom
       (modus-%1$s-theme-3d-modeline t)
       (modus-%1$s-theme-faint-syntax nil)
       (modus-%1$s-theme-distinct-org-blocks t)
       (modus-%1$s-theme-section-headings nil)
       (modus-%1$s-theme-scale-headings t)
       :config
       (run-at-time (nth (if (string= theme "operandi") 1 4)
                         (split-string (sunrise-sunset)))
                    (* 60 60 24)
                    (lambda () (my-load-theme 'modus-%1$s))))
     theme))
#+end_src

*** Font
I love Fira Code but it lacks italics. Hack might be a good alternative.

#+begin_src emacs-lisp
  (defun my-auto-size-font (n)
    "Set the font size such that n buffers of 80 chars fit side by side."
    (interactive "nHow many 80 chars buffers should fit side by side? ")
    (let ((size 1.0))
      (set-frame-font (concat "Fira Code-" (number-to-string size)) nil t)
      (while (>= (save-window-excursion
                  (delete-other-windows)
                  (window-max-chars-per-line))
                (* n 90))
        (setq size (+ size 0.5))
        (set-frame-font (concat "Fira Code-" (number-to-string size)) nil t))
      (message "The suggested font size is %f" size)
      (number-to-string size)))

  (add-to-list 'default-frame-alist '(font . "Fira Code-22.5"))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; (add-to-list 'default-frame-alist '(alpha 90)) ;; transparent frame
#+end_src

** Words, white spaces and text
- No trailing whitespaces when a file is saved
- CamelCaseSubWords are separate words
- Overwrite selected text
- Append a newline to the end of a file
- 80 chars per line
- Spaces over tabs
- visual-line-mode in Termux
- sentences can be separated by one space

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  (use-package delsel
    :config (delete-selection-mode))

  (setq require-final-newline t)
  (setq-default fill-column 72)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default indent-tabs-mode nil)
  ;; (setq sentence-end-double-space nil)
  (when in-termux-p
    (global-visual-line-mode t))

  (use-package subword
    :hook (prog-mode-hook . subword-mode))
#+end_src

** Windows, buffers and files
- Remember recent files
- Automatically revert buffers (perhaps no need to be done at init)
- Killing a buffer also kills the window

#+begin_src emacs-lisp
  (use-package autorevert
    :config
    (setq auto-revert-remote-files t)
    :hook (after-init-hook . global-auto-revert-mode))

  (use-package window
    :bind ([remap kill-buffer] . kill-buffer-and-window))
#+end_src

** Backups
Backups and auto-save files at ~/.emacs/backups

#+begin_src emacs-lisp
  (setq backups-dir (concat user-emacs-directory "backups/"))
  (unless (file-exists-p backups-dir)
    (mkdir backups-dir))
  (setq backup-directory-alist `(("." . ,backups-dir))
        tramp-backup-directory-alist backup-directory-alist)
#+end_src

** Hist
#+begin_src emacs-lisp
  (use-package savehist
    :custom
    (history-length 30000)
    :config
    (savehist-mode 1))

  (use-package recentf
    :config
    (setq recentf-max-saved-items 250)
    :hook (after-init-hook . recentf-mode))

  (use-package saveplace
    :config (save-place-mode 1))
#+end_src

** Keybindings
check M-x describe-personal-keybindings

Super key - window manager
C-c <letter> - free emacs keybindings
F5-F12 - free emacs keybindings
C-i - useless emacs binding
M-r - useless (?)
C-z - useless in emacs
C-x C-z - same as above

#+begin_src emacs-lisp
  (defun my-switch-to-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*"))

  (global-set-key (kbd "C-x w") 'eww)
  (global-set-key (kbd "C-x f") 'browse-url-firefox)
  (global-set-key (kbd "S-SPC") 'cycle-spacing)
  (global-set-key (kbd "M-SPC") 'other-window)
  (global-set-key (kbd "C-c f") 'my-switch-to-agenda)
  (global-set-key (kbd "M-o")   'mode-line-other-buffer)

  (global-unset-key (kbd "C-z"))

  ;; (bind-keys
  ;;  ("C-:" . eval-print-last-sexp)
  ;;  ("C-d" . delete-forward-char)
  ;;  ("M-K" . kill-paragraph)
  ;;  ("M-Z" . zap-to-char)
  ;;  ("M-o" . other-window)
  ;;  ("C-x C-p" . proced)
  ;;  ("C-x c" . set-goal-column)
  ;;  ("C-x k" . kill-current-buffer)
  ;;  ("C-x K" . kill-buffer)
  ;;  ("C-x C-d" . dired)
  ;;  ("C-x d" . list-directory)
  ;;  ([remap list-buffers] . electric-buffer-list)
  ;;  ([remap upcase-word] . upcase-dwim)
  ;;  ([remap downcase-word] . downcase-dwim)
  ;;  ([remap capitalize-word] . capitalize-dwim)
  ;;  ([remap just-one-space] . cycle-spacing)
  ;;  ([remap count-words-region] . count-words)
  ;;  ("C-M-o" . up-list)
  ;;  ((if (string= (system-name) "penguin") "<C-delete>" "<C-M-backspace>") .
  ;;   ;; Alt+backspace sends <delete> on the Chromebook...
  ;;   kill-backward-up-list)
  ;;  ("M-R" . raise-sexp)
  ;;  ("M-E" . mark-end-of-sentence)
  ;;  ("M-T" . transpose-sentences)
  ;;  ("C-x M-t" . transpose-paragraphs)
  ;;  ("C-S-s" . forward-same-syntax)
  ;;  ("M-p" . previous-error)
  ;;  ("M-n" . next-error)
  ;;  ([remap apropos-command] . apropos)
  ;;  ;; The Chromebook has a pretty reload key!
  ;;  ("<XF86Reload>" . revert-buffer))
#+end_src

** Modeline
- Minion hides minor modes
- I usually check the battery status from the window manager modeline
- Tuple (#line, #column) on the modeline
- Hide-mode-line does the obvious and it's handy for presentations

#+begin_src emacs-lisp
  (use-package minions
    :config
    (minions-mode 1)
    (setq minions-direct '(org-tree-slide-mode
                           text-scale-mode
                           geiser-mode
                           yeis-mode)
          minions-mode-line-delimiters '("" . "")
          minions-mode-line-lighter "."))

  ;; more info about the battery /sys/class/power_supply/BAT0
  (use-package battery
    :config
    (setq battery-mode-line-format " %p%"
          battery-mode-line-limit 25))

  (column-number-mode)

  (use-package hide-mode-line
    :defer t)
#+end_src

** Cursor
- Preserve cursor position after C-v or M-v
- Preserve cursor position after closing a file
- Avy moves my cursor around

change this keybinding to C-m, C-i or M-j?
#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position 'always)
  (setq blink-cursor-blinks 2)

  (use-package avy
    :bind ("C-r" . avy-goto-word-1))
#+end_src

* Programming
** Languages
*** Python
Add binds only to python-mode-map

#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    ;; :bind
    ;; ("C-c p" . elpy-autopep8-fix-code)
    ;; ("C-c b" . elpy-black-fix-code)
    )

  ;; (use-package company-jedi
  ;;   :config (add-to-list 'company-backends 'company-jedi))

  ;; (use-package ein)

  ;; (add-hook 'python-mode-hook (lambda ()
  ;;                               (require 'sphinx-doc)
  ;;                               (sphinx-doc-mode t)))

  (add-hook 'python-mode-hook
            (setq-default electric-indent-inhibit t))

  (use-package python
    :bind (:map inferior-python-mode-map
            ("M-p" . comint-previous-matching-input-from-input)
            ("M-n" . comint-next-matching-input-from-input)))
#+end_src

*** Haskell
#+begin_src emacs-lisp
  ;; (use-package haskell-mode)

  ;; (add-hook 'haskell-mode-hook
  ;;           (lambda ()
  ;;             (haskell-doc-mode)
  ;;             (turn-on-haskell-indent)))
#+end_src

*** Bash
**** Shell
#+begin_src emacs-lisp
  (use-package shell
    :bind (:map shell-mode-map
          ("M-p" . comint-previous-matching-input-from-input)
          ("M-n" . comint-next-matching-input-from-input)
          ("SPC" . comint-magic-space)))
#+end_src

**** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :custom
    ;; (pcomplete-cycle-completions nil)
    ;; (eshell-history-file-name (expand-file-name "~/.bash_history"))
    (eshell-history-size 1000)
    (eshell-prefer-list-functions t)
    :init (require 'esh-module)
    :config
    (add-to-list 'eshell-modules-list 'eshell-tramp)
    :hook
    (eshell-mode-hook . (lambda () (company-mode -1)))
    ;; :bind (:map eshell-mode-map
    ;;             ("<M-tab>" . completion-at-point))
    :bind ([remap shell-command] . eshell-command))

  (add-hook 'eshell-mode-hook
    (lambda ()
      (define-key eshell-mode-map (kbd "<M-tab>") nil)
      (define-key eshell-mode-map (kbd "<M-tab>")
        (lambda () (interactive) (completion-at-point)))))

  (use-package em-term
    :config
    (add-to-list 'eshell-visual-commands "nmtui")
    (add-to-list 'eshell-visual-commands "alsamixer"))
#+end_src

**** Term
#+begin_src emacs-lisp
  ;; (use-package term
  ;;   :bind (("C-c t" . term)
  ;;          :map term-mode-map
  ;;          ("M-p" . term-send-up)
  ;;          ("M-n" . term-send-down)
  ;;          :map term-raw-map
  ;;          ("M-o" . other-window)
  ;;          ("M-p" . term-send-up)
  ;;          ("M-n" . term-send-down)))
#+end_src

*** Elisp
#+begin_src emacs-lisp
  (use-package flycheck-package
    :after flycheck
    :config
    (flycheck-package-setup))

  (use-package package-lint-flymake
    :after flymake
    :config
    (package-lint-flymake-setup))

  (define-key lisp-mode-shared-map (kbd "RET")
    'reindent-then-newline-and-indent)

  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'my-starter-kit-remove-elc-on-save)

  (defun my-starter-kit-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))
#+end_src

*** COMMENT Scala
#+begin_src emacs-lisp
  (use-package scala-mode
    :disabled)

  (use-package ensime
    :disabled)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
#+end_src

*** COMMENT Golang
Requires gocode for the autocomplete to work.

#+begin_src emacs-lisp
  (use-package go-mode
    :disabled
    :defer t)

  (use-package company-go
    :disabled
    :defer t
    :config (add-to-list 'company-backends 'company-go))
#+end_src

*** \LaTeX
#+begin_src emacs-lisp
  (use-package auctex
    :defer t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t)
    (setq-default TeX-master nil))
#+end_src

** Version Control
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-display-buffer-function
          (quote magit-display-buffer-same-window-except-diff-v1))
    :bind ("C-x g" . magit-status))

  ;; to avoid passphrase prompts
  (use-package ssh-agency)

  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))

  ;; (use-package gitignore-mode)
#+end_src

** Files
*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode (("\\.yml\\'" . yaml-mode)
           ("\\.yaml\\'" . yaml-mode)))
#+end_src

*** CSV
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t)
#+end_src

** Misc
*** Projectile
#+begin_src emacs-lisp
  ;; (use-package projectile
  ;;   :init
  ;;   (projectile-mode 1)
  ;;   :config
  ;;   (setq projectile-completion-system 'ivy)
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map))
#+end_src

*** Colorful delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** Pretty mode
Global pretty mode breaks html export of org-mode files when there are functions
in python source code blocks.

#+begin_src emacs-lisp
  (use-package pretty-mode
    :disabled
    :config
    (require 'pretty-mode)
    (global-pretty-mode t)
    (pretty-activate-groups
     '(:sub-and-superscripts :arithmetic-nary :quantifiers :types)))

  (global-prettify-symbols-mode t)
#+end_src

*** Parenthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (sp-local-pair 'org-mode "$$" "$$")
    (show-smartparens-global-mode)
    (smartparens-global-mode)
    :hook (prog-mode-hook . smartparens-strict-mode))

  ;; built-in package
  ;; (use-package paren
  ;;   :config
  ;;   (show-paren-mode)
  ;;   (setq show-paren-delay 0
  ;;         ;; show-paren-when-point-inside-paren t
  ;;         show-paren-when-point-in-periphery t
  ;;         )
  ;;   :hook (after-init-hook . show-paren-mode))
#+end_src

* Org
#+begin_src bash
  owncloudcmd -s -u user -p pw $HOME/NextCloud/ https://cloud.owncube.com/remote.php/webdav/
#+end_src

- Syncthing vs Nextcloud vs cron/rsync?

** Basics
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-use-speed-commands t)
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    ;; (org-cycle-global-at-bob t)
    (org-list-demote-modify-bullet '(("-" . "+") ("+" . "-")))
    (org-list-indent-offset 1)
    (org-return-follows-link t)
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    (org-agenda-include-diary t)
    (org-agenda-start-on-weekday nil)
    (org-agenda-files '("~/NextCloud/org"))
    (org-directory "~/NextCloud/org/")
    (org-todo-keywords '((sequence "TODO(t!)"
                                   "WIP(s!)"
                                   "WAITING(w@)"
                                   "|"
                                   "DONE(d!)"
                                   "NOT TODO(n@)"
                                   "CANCELED(c@)")))
    (org-todo-keyword-faces '(("WIP" . "orange")
                              ("WAITING" . "yellow")))
    ;; (org-fontify-done-headline t)
    ;; (orgtbl-mode t)
    ;; (org-hide-leading-stars t)
    ;; (org-startup-indented t)
    (org-startup-with-inline-images t)
    (org-image-actual-width 500)
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    (org-preview-latex-image-directory "ltximg/")

    :config
    (customize-set-variable
     'org-structure-template-alist
     (append org-structure-template-alist
             '(("thm"  . "theorem")
               ("pf"   . "proof")
               ("lem"  . "lemma")
               ("cor"  . "corollary")
               ("def"  . "definition")
               ("rem"  . "remark")
               ("exer" . "exercise")
               ("prop" . "proposition")
               ("el"   . "src emacs-lisp"))))

    :bind
    ("C-c a"     . org-agenda)
    ("C-c l"     . org-store-link)
    ("C-c c"     . org-capture)
    ("C-c j"     . my-org-checkbox-next)
    ("<mouse-1>" . my-org-checkbox-next))

  ;; (global-set-key (kbd "C-'") nil)
#+end_src

** Literate Programming
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-confirm-babel-evaluate nil)

  ;; (use-package ob-ipython
  ;;   :defer t)

  ;; (use-package ob-go
  ;;   :defer t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme     . t)
     (python     . t)
     (ipython    . t)
     (haskell    . t)
     ;; (go         . t)
     (latex      . t)
     (shell      . t)
     (ditaa      . t)))
#+end_src

** Exports
- Ox-beamer exports org files to beamer presentation
- Minted gives syntax highlighting to latex exports
- Htmlize gives syntax highlighting to html exports

[[http://mirrors.ibiblio.org/CTAN/macros/latex/required/amscls/doc/amsthdoc.pdf][amsthm package documentation]]
[[https://github.com/dangom/org-thesis][org/tex tips]]

#+begin_src emacs-lisp
  (require 'ox-beamer)
  ;; (setq org-latex-listings 'minted)
  ;; (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))

  ;; for exporting in foreing languages
  (add-to-list 'org-latex-packages-alist
               '("AUTO" "babel" t ("pdflatex")))
  (add-to-list 'org-latex-packages-alist
                         '("AUTO" "polyglossia" t ("xelatex" "lualatex")))

  ;; this should be added at the end of the list rather
  ;; (add-to-list 'org-latex-default-packages-alist '("" "amsthm" t))
  (add-to-list 'org-latex-packages-alist '("" "listings"))
  (setq org-latex-listings t)

  (add-to-list 'org-latex-classes
               '("aadcg-article"
  "\\documentclass[11pt]{amsart}
  [DEFAULT-PACKAGES]
  [PACKAGES]
  \\usepackage{amsthm}
  \\newtheorem{theorem}{Theorem}[section]
  \\newtheorem{lemmma}[theorem]{Lemma}
  \\newtheorem{proposition}[theorem]{Proposition}
  \\newtheorem{corollary}[theorem]{Corollary}

  \\theoremstyle{definition}
  \\newtheorem{definition}{Definition}[section]
  \\newtheorem{example}{Example}[section]
  \\newtheorem{exercise}[exa]{Exercise}

  \\theoremstyle{remark}
  \\newtheorem{remark}{Remark}
  \\newtheorem{note}{Note}
  \\newtheorem{case}{case}
  [EXTRA]"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (use-package htmlize)
#+end_src

** Packages and Extensions
[[https://orgmode.org/worg/org-contrib/org-drill.html][tutorial]]

#+begin_src emacs-lisp
  (use-package org-drill
    :config
    (require 'org-drill)
    (setq org-drill-save-buffers-after-drill-sessions-p nil
          org-drill-scope 'tree))

  (use-package org-drill-table)

  (use-package cdlatex
    :defer t
    :hook (org-mode-hook . org-cdlatex-mode))

  ;; (use-package org-pdftools
  ;;   :when window-system
  ;;   :defer t
  ;;   :hook (org-load-hook . org-pdftools-setup-link))

  (defun my-org-checkbox-next ()
    "Mark checkboxes and sort."
    (interactive)
    (let ((home (point)))
      (when (org-at-item-checkbox-p)
        (org-toggle-checkbox)
        (org-sort-list nil ?x)
        (goto-char home))))

  (defun my-org-replace-link-by-link-description ()
    "Replace org link by its description or url."
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description))))

  (defun my-diary-last-day-of-month (date)
    "Return `t` if DATE is the last day of the month.

  Credit to https://emacs.stackexchange.com/a/31708/19054."
    (let* ((day (calendar-extract-day date))
           (month (calendar-extract-month date))
           (year (calendar-extract-year date))
           (last-day-of-month
            (calendar-last-day-of-month month year)))
      (= day last-day-of-month)))

  ;; org-cycle if tree is all checkboxes are ticked
  ;; (defun my-org-at-item-checkbox-p ()
  ;;   "Is point at a line starting a plain-list item with a checklet?"
  ;;   (org-list-at-regexp-after-bullet-p "\\(\\[[- X]\\]\\)[ \t]+"))
  ;; (cookie-re "\\(\\(\\[[0-9]*%\\]\\)\\|\\(\\[[0-9]*/[0-9]*\\]\\)\\)")
  ;; matches digits / same digits
  ;; \[\([0-9]*\)/\1\]

#+end_src

** Presenting
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :config
    (setq org-tree-slide-slide-in-effect nil
          org-tree-slide-cursor-init nil
          org-tree-slide-never-touch-face t
          org-tree-slide-activate-message "Welcome to my presentation!"
          org-tree-slide-deactivate-message "Hope you have enjoyed!")

    (defun my-presenting ()
      "Presenting mode"
      (interactive)
      (hide-mode-line-mode)
      (global-diff-hl-mode 0)
      (setq global-hl-line-mode nil)
      (auto-size-font 1))

    (defun my-non-presenting ()
      "Non-presenting mode"
      (interactive)
      (setq hide-mode-line-mode t)
      (global-diff-hl-mode)
      (global-hl-line-mode)
      (auto-size-font 2))

    :hook
    ((org-tree-slide-play-hook . my-presenting)
     (org-tree-slide-stop-hook . my-non-presenting))

    :bind
    ("<f8>" . org-tree-slide-mode)
    ("<f7>" . org-tree-slide-play-with-timer)
    ("C->"  . org-tree-slide-move-next-tree)
    ("C-<"  . org-tree-slide-move-previous-tree))
#+end_src

** Look and Feel
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :custom (org-bullets-bullet-list '("§"))
    :hook (org-mode-hook . org-bullets-mode))
#+end_src

* Emacs OS - The Kitchen Sink
** Guix
#+begin_src emacs-lisp
  (use-package guix
    :bind ("s-g" . guix))

  (use-package pretty-sha-path)
#+end_src

** Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :custom
    (ibuffer-expert t)
    (ibuffer-default-sorting-mode 'major-mode)
    :hook
    (ibuffer-mode-hook . hl-line-mode)
    :bind (("C-x C-b" . ibuffer)))
#+end_src

** Dired
[[info:emacs#Dired][Documentation]]

#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-copies 'always
          dired-recursive-deletes 'always
          ;; delete-by-moving-to-trash t
          dired-listing-switches "-Atrhl --group-directories-first"
          dired-auto-revert-buffer t)
    :hook ((dired-mode-hook . hl-line-mode))
    :bind ("C-x C-j" . dired-jump))
#+end_src

** Checking
*** Flycheck
#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :init
  ;;   (global-flycheck-mode t))
#+end_src

*** Flyspell
#+begin_src emacs-lisp
  (when window-system
    (use-package flyspell
      :defer t
      :config
      (flyspell-prog-mode)))
      ;; (when org-mode-hook
      ;;   (flyspell-mode-off))))
#+end_src

** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :when window-system
    :custom (pdf-view-midnight-colors '("#ffffff" . "#000000"))
    :config
    ;; (setq image-scaling-factor 1) ; Emacs 27 needs this
    ;; this is a hack so that I can use docview links in org-mode
    (defalias 'doc-view-goto-page 'pdf-view-goto-page)
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :hook
    ((pdf-view-mode-hook . pdf-view-fit-height-to-window)
     (pdf-view-mode-hook . pdf-links-minor-mode)
     (pdf-view-mode-hook . pdf-annot-minor-mode)
     (pdf-view-mode-hook . pdf-view-auto-slice-minor-mode)
     (pdf-view-mode-hook . (lambda ()
                             (when (eq
                                    (frame-parameter nil 'background-mode)
                                    'dark)
                               (pdf-view-midnight-minor-mode))))))
#+end_src

** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=". 'er/expand-region))
#+end_src

** Emacs completion
[[info:ivy#Top][Documentation]]

#+begin_src emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-count-format "%d/%d "
          ;; ivy-wrap t
          ivy-extra-directories nil
          ;; ivy-initial-inputs-alist nil
          ivy-use-virtual-buffers t
          ;; ivy-read-action-function 'ivy-read-action-ivy
          ;; ivy-height-alist '((t lambda (_caller) (/ (window-height) 3)))
          )
    (add-to-list 'ivy-format-functions-alist '(t . ivy-format-function-arrow))
    :bind
    ("C-x B" . ivy-switch-buffer-other-window))

  (use-package counsel
    :config
    (counsel-mode)
    :bind
    ("C-x 8" . counsel-unicode-char))

  (use-package swiper
    :bind
    ("C-s" . swiper))

  (use-package smex
    :custom (smex-save-file (concat user-emacs-directory ".smex")))

  (use-package ivy-posframe
    :after ivy
    :config
    (setq ivy-posframe-parameters
          '((internal-border-width . 4)
            (alpha . 10)))
    (setq ivy-posframe-height-alist
          '((swiper . 15)
            (swiper-isearch . 15)
            (t . 10)))
    (setq ivy-posframe-display-functions-alist
          '((complete-symbol . ivy-posframe-display-at-point)
            (swiper . nil)
            (swiper-isearch . nil)
            (t . ivy-posframe-display-at-frame-center)))
    (setq ivy-posframe-width nil)
    (ivy-posframe-mode 1))
#+end_src

** Auto-complete
[[https://company-mode.github.io/][Documentation]]

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    (setq company-require-match nil
          company-idle-delay 0.1
          company-selection-wrap-around t)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "C-j") 'company-complete-selection)
    (define-key company-active-map (kbd "<tab>")
    'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+end_src

** Elmacro
#+begin_src emacs-lisp
  (use-package elmacro
    :defer t)
#+end_src

** IRC (freenode)
#+begin_src emacs-lisp
  (use-package erc
    :config
    (defun my-freenode ()
      (interactive)
      (let ((erc-plist (car (auth-source-search :host "irc.freenode.net")))
            (erc-prompt-for-password nil))
        (setq erc-server "irc.freenode.net")
        (setq erc-nick (plist-get erc-plist :user))
        (setq erc-password (funcall (plist-get erc-plist :secret)))
        (erc))))
#+end_src

** Games
#+begin_src emacs-lisp
  (use-package speed-type
    :defer t)
#+end_src

** Google Translate
#+begin_src emacs-lisp
  (use-package google-translate
    :defer t
    :config
    (setq google-translate-default-source-language "auto"
          google-translate-default-target-language "en"
          google-translate-backend-method 'emacs)
    (require 'google-translate-default-ui)
    :bind
    ("C-c t" . google-translate-at-point)
    ("C-c T" . google-translate-query-translate))
#+end_src

** Media
Requires mpv.

#+begin_src emacs-lisp
  (use-package emms
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)

    (defun my-emms-play-url-at-point ()
      "Same as `emms-play-url' but with url at point."
      (interactive)
      (emms-play-url (url-get-url-at-point)))
    :bind
    ("<XF86AudioPlay>" . emms-pause)
    ("<XF86AudioNext>" . emms-next)
    ("<XF86AudioPrev>" . emms-previous))
#+end_src

** Regional
*** Input Method
Всё ясно, да?

#+begin_src emacs-lisp
  (setq yeis-dir (expand-file-name "repos/emacs-yeis/" "~"))

  (load-file (concat yeis-dir "yeis.el"))
  (load-file (concat yeis-dir "x-leim/robin-packages.el"))
  (load-file (concat yeis-dir "x-leim/x-leim-list.el"))

  (setq default-input-method "robin-russian"
        yeis-path-plain-word-list (concat yeis-dir "wordlist"))
  (setq-default robin-current-package-name "robin-russian")
  (global-set-key (kbd "C-|") 'yeis-transform-previous-word)
  ;; (global-set-key (kbd "C-x C-\\") 'yeis-transform-previous-word)

  (defun my-change-to-dict (dict)
    "Change to the dictionary given by string DICT."
    (let ((inhibit-message t))
      (ispell-change-dictionary dict)))

  (add-hook 'input-method-activate-hook
            (lambda () (my-change-to-dict "ru")))

  (add-hook 'input-method-deactivate-hook
            (lambda () (my-change-to-dict "en")))
#+end_src

*** Calendar
#+begin_src emacs-lisp
  (use-package calendar
    :config (setq calendar-week-start-day 1)
    :hook (calendar-today-visible-hook . calendar-mark-today))
#+end_src

*** Clock
#+begin_src emacs-lisp
  (use-package time
    :config
    (setq display-time-format " %k:%M %a %d %b"
          display-time-default-load-average nil
          display-time-world-list '(("Europe/Moscow" "Москва")
                                    ("Europe/Lisbon" "Lisboa"))))
#+end_src

*** Holidays
#+begin_src emacs-lisp
  (setq holiday-bahai-holidays nil
        holiday-oriental-holidays nil
        holiday-islamic-holidays nil
        holiday-hebrew-holidays nil
        holiday-christian-holidays nil

        holiday-general-holidays
        '(;; Portuguese Public Holidays
          (holiday-fixed 1 1      "Ano Novo")
          (holiday-easter-etc -47 "Carnaval")
          (holiday-easter-etc -2  "Sexta-feira Santa")
          (holiday-easter-etc 0   "Domingo de Páscoa")
          (holiday-fixed 3 19     "Dia do Pai")
          (holiday-fixed 4 25     "Dia da Liberdade")
          (holiday-fixed 5 1      "Dia do Trabalhador")
          (holiday-easter-etc +60 "Corpo de Deus")
          (holiday-float 5 0 1    "Dia da Mãe")
          (holiday-fixed 6 10     "Dia de Portugal, de Camões e das
          Comunidades Portuguesas")
          (holiday-fixed 8 15     "Assunção de Nossa Senhora")
          (holiday-fixed 10 5     "Implantação da República")
          (holiday-fixed 11 1     "Dia de Todos-os-Santos")
          (holiday-fixed 12 1     "Restauração da Independência")
          (holiday-fixed 12 8     "Imaculada Conceição")
          (holiday-fixed 12 45    "Consoada")
          (holiday-fixed 12 25    "Natal")

          ;; Russian Public Holidays
          (holiday-fixed 1 1  "Новый год")
          (holiday-fixed 1 2  "Новогодние каникулы")
          (holiday-fixed 1 3  "Новогодние каникулы")
          (holiday-fixed 1 4  "Новогодние каникулы")
          (holiday-fixed 1 5  "Новогодние каникулы")
          (holiday-fixed 1 6  "Новогодние каникулы")
          (holiday-fixed 1 7  "Рождество Христово")
          (holiday-fixed 1 8  "Новогодние каникулы")
          (holiday-fixed 2 23 "День защитника Отечества")
          (holiday-fixed 3 8  "Международный женский день")
          (holiday-fixed 5 1  "Праздник Весны и Труда")
          (holiday-fixed 5 9  "День Победы")
          (holiday-fixed 6 12 "День России")
          (holiday-fixed 11 4 "День народного единства")

          ;; American Public Holidays
          ;; (holiday-float 1 1 3 "Martin Luther King Day")
          ;; (holiday-fixed 2 2 "Groundhog Day")
          (holiday-fixed 2 14 "Valentine's Day")
          ;; (holiday-float 2 1 3 "President's Day")
          ;; (holiday-fixed 3 17 "St. Patrick's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          ;; (holiday-float 5 0 2 "Mother's Day")
          ;; (holiday-float 5 1 -1 "Memorial Day")
          ;; (holiday-fixed 6 14 "Flag Day")
          ;; (holiday-float 6 0 3 "Father's Day")
          ;; (holiday-fixed 7 4 "Independence Day")
          ;; (holiday-float 9 1 1 "Labor Day")
          ;; (holiday-float 10 1 2 "Columbus Day")
          (holiday-fixed 10 31 "Halloween")
          ;; (holiday-fixed 11 11 "Veteran's Day")
          ;; (holiday-float 11 4 4 "Thanksgiving")
          )

        holiday-other-holidays
        '(;; Days Off for 2019
          ;; (holiday-fixed 12 24 "Day Off")
          ;; (holiday-fixed 12 26 "Day Off")

          ;; Company Holidays for 2019
          ;; (holiday-fixed 7 19 "Company Holiday")
          )

          holiday-local-holidays
          '(;; Porto, PT
            (holiday-fixed 6 24 "Dia de São João")
            ;; Санкт-Петербург, Россия
            (holiday-fixed 1 27 "День Снятия Блокады")
            (holiday-fixed 5 27 "День Города")))
#+end_src

** Man
#+begin_src emacs-lisp
  (setq Man-notify-method 'pushy)
#+end_src

** Browser (eww)
#+begin_src emacs-lisp
  (use-package shr
    :custom
    (shr-use-fonts nil)
    (shr-use-colors nil)
    (shr-max-image-proportion 0.7)
    (shr-width (current-fill-column)))

  (use-package eww
    ;; :config
    ;; (setq eww-suggest-uris '(eww-links-at-point
    ;;                          thing-at-point-url-at-point
    ;;                          word-at-point)) ; removed eww-current-url
    :custom
    (eww-suggest-uris '(eww-links-at-point
                        thing-at-point-url-at-point
                        word-at-point)))

  (use-package browse-url
    :custom
    (browse-url-browser-function '(("youtube" . browse-url-firefox)
                                   (".*" . eww-browse-url))))
#+end_src

** Telegram
#+begin_src emacs-lisp
  (use-package telega
    :unless in-termux-p
    :config
    (setq telega-chat-fill-column 70)
    ;; (telega-mode-line-mode 1)
    :bind ("s-t" . telega))

  ;; number of unread messages
  ;; (plist-get telega--unread-message-count :unread_unmuted_count)

  (use-package emojify
    :hook
    (telega-load-hook . emojify-mode)
    ;; (emojify-mode-line-mode)
    )
#+end_src

** Email (gnus)
[[https://protesilaos.com/dotemacs/#h:5ad80664-3163-4d9d-be65-462637d77903][configuring email]]
[[https://www.emacswiki.org/emacs/GnusTutorial][gnus tutorial]]

[[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org#my-gnusel][another gnus tutorial]]

[[https://www.fsf.org/resources/webmail-systems][fsf advice]]
[[https://github.com/kensanata/ggg#gmail-gnus-gpg-guide-gggg][how to encrypt]]

#+begin_src emacs-lisp
  (use-package gnus
    :config
    (setq gnus-inhibit-startup-message t
          gnus-interactive-exit 'quiet)
    :hook
    (message-send-hook . ispell-message)
    ;; (after-init-hook . gnus)
    ;; (kill-emacs-hook . gnus-group-exit)
    )

  (use-package sendmail
    :custom
    (mail-signature
     "\n\n-- \nAndré Alexandre Gomes\n\"Free Thought, Free World\"")
    (message-signature
     "\n\n-- \nAndré Alexandre Gomes\n\"Free Thought, Free World\""))

  ;; WIP
  (defun my-mail-missing-attachment-p ()
    "Return t if an attachment is missing."
    (interactive)
    (save-excursion
      (goto-char (message-goto-body))
      (when (re-search-forward "attach")
        (message "Did you forget to attach something?"))))
#+end_src

** Weather
#+begin_src emacs-lisp
  (use-package wttrin
    :custom
    (wttrin-default-cities '("Saint Petersburg"
                             "Porto"
                             "Oliveira de Azeméis")))
#+end_src

** Screencast utilities
 #+begin_src emacs-lisp
   (use-package gif-screencast
     :config (setq gif-screencast-program "grim"
                   gif-screencast-args nil
                   )
     :bind ("<f9>" . gif-screencast-start-or-stop))

   (use-package keycast
     :config
     (add-to-list 'keycast-substitute-alist '(self-insert-command nil nil))
     (setq keycast-separator-width 2))

   ;; this is useless, kind of similar to my-auto-size-font
   ;; (use-package default-text-scale
   ;;   :defer t)
 #+end_src

* My Kitchen Sink
** Metaconfiguring
Visit and reload this config
#+begin_src emacs-lisp
  (defun my-config-visit ()
    "Visit ~/.emacs.d/config.org."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'my-config-visit)

  ;; (load user-init-file)
#+end_src

** Learning Russian
- how to open in new eww buffer is one already exists?
- add method to look for the root of the work if verb if conjugated,
  adjective/noun is declinated ([[https://unix.stackexchange.com/questions/154098/copy-the-last-emacs-message-into-the-current-buffer][see]])

#+begin_src emacs-lisp
  (defun my-openru-search (word)
    "Search using https://en.openrussian.org"
    (interactive "MЧто для Вас сударь? ")
    (let ((url "https://en.openrussian.org/ru/"))
      (eww (concat url word))
      (forward-line 27)))

  (defun my-openru-search-at-point ()
    "Search using https://en.openrussian.org at point"
    (interactive)
    (let ((url "https://en.openrussian.org/ru/"))
      (eww (concat url (current-word)))
      (set-buffer "*eww*")
      (forward-line 20)))
#+end_src

* Startup
** Server
#+begin_src emacs-lisp
  (use-package server
    :hook
    (after-init-hook . (lambda () (unless (server-running-p) (server-start)))))
#+end_src

** Desktop
[[info:emacs#Saving Emacs Sessions][Documentation]]

#+begin_src emacs-lisp
  (use-package desktop
    :custom
    (desktop-auto-save-timeout 300)
    (desktop-dirname "~/.emacs.d/")
    (desktop-files-not-to-save nil)
    (desktop-globals-to-clear nil)
    (desktop-restore-eager 3)
    (desktop-restore-frames nil)
    (desktop-lazy-verbose nil)
    (desktop-load-locked-desktop t)
    :config
    (desktop-save-mode 1)
    ;; :hook (server-after-make-frame-hook . desktop-read)
    )
#+end_src

* Ideas
- write use-package extension that ensures guix emacs packages
- [[https://guix.gnu.org/blog/2018/guix-on-android/][try guix on android]]
