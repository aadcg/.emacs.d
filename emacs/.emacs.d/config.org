#+TITLE: GNU Emacs config
#+AUTHOR: AndrÃ© Alexandre Gomes
#+EMAIL: andremegafone@gmail.com
#+PROPERTY: header-args :results silent

* Defaults, Preferences and Aesthetics
** Aesthetics
*** UI
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (fringe-mode '(6 . 0))
  (fset 'yes-or-no-p 'y-or-n-p)

  (use-package hl-line
    :hook (after-init . global-hl-line-mode))

  (setq initial-scratch-message ";; Happy Hacking!

  ")
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package zenburn-theme
    :disabled t
    :config (load-theme 'zenburn t)
    :custom (zenburn-scale-org-headlines t))

  (use-package modus-vivendi-theme
    :defer t
    :custom
    (modus-operandi-theme-distinct-org-blocks t)
    (modus-operandi-theme-scale-headings t)
    (modus-operandi-theme-section-headings t)
    (modus-operandi-theme-slanted-constructs nil)
    (modus-operandi-theme-bold-constructs t)
    (modus-operandi-theme-subtle-diffs t)
    (modus-operandi-theme-3d-modeline t))

  (use-package modus-operandi-theme
    :custom
    (modus-operandi-theme-distinct-org-blocks t)
    (modus-operandi-theme-rainbow-headings t)
    (modus-operandi-theme-scale-headings t)
    (modus-operandi-theme-section-headings t)
    (modus-operandi-theme-slanted-constructs nil)
    (modus-operandi-theme-bold-constructs t)
    (modus-operandi-theme-subtle-diffs t)
    (modus-operandi-theme-3d-modeline t)
    :config
    (load-theme 'modus-operandi t)

    (defun toggle-modus-theme ()
    "Toggle between `modus-operandi' and `modus-vivendi' themes."
    (interactive)
    (if (eq (car custom-enabled-themes) 'modus-operandi)
        (counsel-load-theme-action "modus-vivendi")
      (counsel-load-theme-action "modus-operandi"))))
#+end_src

*** Font
I love Fira Code but it lacks italics. Hack might be a good alternative.

#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fira Code 23"))
  (add-to-list 'default-frame-alist '(alpha 95))
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

  (defun auto-size-font (n)
    "Set the font size such that n buffers of 80 chars fit side by side."
    (interactive "nHow many 80 chars buffers do you want side by side? ")
    (let ((size 10))
      (set-frame-font (concat "Fira Code " (number-to-string size)) nil t)
      (delete-other-windows)
      (while (> (window-max-chars-per-line) (* n 90))
        (setq size (1+ size))
        (set-frame-font (concat "Fira Code " (number-to-string size)) nil t))
      (message "The suggested font size is %d" size)))
#+end_src

** Words, white spaces and text
- No trailing whitespaces when a file is saved
- CamelCaseSubWords are separate words
- Overwrite selected text
- Append a newline to the end of a file
- 80 chars per line
- Spaces over tabs
- visual-line-mode in Termux
- sentences can be separated by one space

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; the init-hook isn't working...?
  (use-package delsel
    :config (delete-selection-mode)
    ;; :hook (after-init . delete-selection-mode)
    )

  (setq require-final-newline t)
  (setq-default fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq-default indent-tabs-mode nil)
  (setq sentence-end-double-space nil)
  (when in-termux-p
    (global-visual-line-mode t))

  (use-package subword
    :hook (prog-mode . subword-mode))
#+end_src

** Windows, buffers and files
- Remember recent files
- Automatically revert buffers (perhaps no need to be done at init)
- Killing a buffer also kills the window

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 1000)
    :hook (after-init . recentf-mode))

  (use-package autorevert
    :config
    (setq auto-revert-remote-files t)
    :hook (after-init . global-auto-revert-mode))

  (use-package window
    :bind ([remap kill-buffer] . kill-buffer-and-window))

  ;; (substitute-key-definition 'kill-buffer 'kill-buffer-and-window global-map)
#+end_src

** Backups
Backups and auto-save files at ~/.emacs/backups

#+begin_src emacs-lisp
  (setq backups-dir (concat user-emacs-directory "backups/"))
  (unless (file-exists-p backups-dir)
    (mkdir backups-dir))
  (setq backup-directory-alist `(("." . ,backups-dir))
        tramp-backup-directory-alist backup-directory-alist)
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (defun switch-to-agenda ()
    (interactive)
    (switch-to-buffer "*Org Agenda*"))

  (global-set-key (kbd "C-x w") 'eww)
  (global-set-key (kbd "C-x f") 'browse-url-firefox)
  (global-set-key (kbd "S-SPC") 'cycle-spacing)
  (global-set-key (kbd "M-SPC") 'other-window)
  (global-set-key (kbd "C-c f") 'switch-to-agenda)
  (global-set-key (kbd "M-o")   'mode-line-other-buffer)
#+end_src

** Modeline
- Minion hides minor modes
- I usually check the battery status from the window manager modeline
- Tuple (#line, #column) on the modeline
- Hide-mode-line does the obvious and it's handy for presentations

#+begin_src emacs-lisp
  (use-package minions
    :config
    (minions-mode 1)
    (setq minions-direct '(org-tree-slide-mode
                           text-scale-mode
                           geiser-mode
                           yeis-mode)
          minions-mode-line-delimiters '("" . "")))

  ;; more info about the battery /sys/class/power_supply/BAT0
  (use-package battery
    :defer t
    :config
    (setq battery-mode-line-format " %p%"
          battery-mode-line-limit 30))

  (column-number-mode)

  (use-package hide-mode-line
    :defer t)
#+end_src

** Cursor
- Preserve cursor position after C-v or M-v
- Preserve cursor position after closing a file
- Avy moves my cursor around

change this keybinding to C-m, C-i or M-j?
#+begin_src emacs-lisp
  (setq scroll-preserve-screen-position 'always)
  (save-place-mode 1)
  (setq blink-cursor-blinks 2)

  (use-package avy
    :bind ("C-r" . avy-goto-word-1))
#+end_src

* Programming
** Languages
*** Python
Add binds only to python-mode-map

#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (setq elpy-rpc-python-command "python3"
          python-shell-interpreter "python3"
          ;; python-shell-interpreter "ipython"
          ;; elpy-rpc-virtualenv-path 'current
          ;; pyvenv-mode-line-indicator nil
          )
    ;; :bind
    ;; ("C-c p" . elpy-autopep8-fix-code)
    ;; ("C-c b" . elpy-black-fix-code)
    )

  ;; (use-package company-jedi
  ;;   :config (add-to-list 'company-backends 'company-jedi))

  ;; (use-package ein)

  ;; (add-hook 'python-mode-hook (lambda ()
  ;;                               (require 'sphinx-doc)
  ;;                               (sphinx-doc-mode t)))

  (add-hook 'python-mode-hook
            (setq-default electric-indent-inhibit t))
#+end_src

*** Haskell
#+begin_src emacs-lisp
  ;; (use-package haskell-mode)

  ;; (add-hook 'haskell-mode-hook
  ;;           (lambda ()
  ;;             (haskell-doc-mode)
  ;;             (turn-on-haskell-indent)))
#+end_src

*** Bash
**** Shell
#+begin_src emacs-lisp
  (use-package shell
    :bind (:map shell-mode-map
          ("M-p" . comint-previous-matching-input-from-input)
          ("M-n" . comint-next-matching-input-from-input)
          ("SPC" . comint-magic-space)))
#+end_src

**** Eshell
#+begin_src emacs-lisp
  (use-package eshell
    :custom
    ;; (pcomplete-cycle-completions nil)
    (eshell-history-file-name (expand-file-name "~/.bash_history"))
    (eshell-history-size 9999)
    :hook
    (eshell-mode . (lambda () (company-mode -1)))
    ;; :bind (:map eshell-mode-map
    ;;             ("<M-tab>" . completion-at-point))
    )

  (add-hook 'eshell-mode-hook
    (lambda ()
      (define-key eshell-mode-map (kbd "<M-tab>") nil)
      (define-key eshell-mode-map (kbd "<M-tab>")
        (lambda () (interactive) (completion-at-point)))))
#+end_src

**** Term
#+begin_src emacs-lisp
  ;; (use-package term
  ;;   :bind (("C-c t" . term)
  ;;          :map term-mode-map
  ;;          ("M-p" . term-send-up)
  ;;          ("M-n" . term-send-down)
  ;;          :map term-raw-map
  ;;          ("M-o" . other-window)
  ;;          ("M-p" . term-send-up)
  ;;          ("M-n" . term-send-down)))
#+end_src

*** Elisp
#+begin_src emacs-lisp
  (use-package flycheck-package
    :after flycheck
    :config
    (flycheck-package-setup))

  (use-package package-lint-flymake
    :after flymake
    :config
    (package-lint-flymake-setup))
#+end_src

*** COMMENT Scala
#+begin_src emacs-lisp
  (use-package scala-mode
    :disabled)
  (use-package ensime
    :disabled)
  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
#+end_src

*** COMMENT Golang
Requires gocode for the autocomplete to work.

#+begin_src emacs-lisp
  (use-package go-mode
    :disabled
    :defer t)

  (use-package company-go
    :disabled
    :defer t
    :config (add-to-list 'company-backends 'company-go))
#+end_src

*** COMMENT \LaTeX
#+begin_src emacs-lisp
  (use-package auctex
    :disabled
    :defer t
    :config
    (setq TeX-auto-save t
          TeX-parse-self t)
    (setq-default TeX-master nil))
#+end_src

** Version Control
#+begin_src emacs-lisp
  (use-package magit
    :config
    (setq magit-display-buffer-function
          (quote magit-display-buffer-same-window-except-diff-v1))
    :bind ("C-x g" . magit-status))

  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))

  ;; (use-package gitignore-mode)
#+end_src

** Files
*** Yaml
#+begin_src emacs-lisp
  (use-package yaml-mode
    :disabled
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)
           ("\\.yaml\\'" . yaml-mode)))
#+end_src

*** CSV
#+begin_src emacs-lisp
  (use-package csv-mode
    :defer t)
#+end_src

** Misc
*** Projectile
#+begin_src emacs-lisp
  ;; (use-package projectile
  ;;   :init
  ;;   (projectile-mode 1)
  ;;   :config
  ;;   (setq projectile-completion-system 'ivy)
  ;;   :bind-keymap
  ;;   ("C-c p" . projectile-command-map))
#+end_src

*** Colorful delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

*** TODO Pretty mode
- State "TODO"       from              [2019-07-18 Thu 13:16]

Global pretty mode breaks html export of org-mode files when there are functions
in python source code blocks.

#+begin_src emacs-lisp
  ;; (use-package pretty-mode
  ;;   :disabled
  ;;   :config
  ;;   (require 'pretty-mode)
  ;;   (global-pretty-mode t)
  ;;   (pretty-activate-groups
  ;;    '(:sub-and-superscripts :arithmetic-nary :quantifiers :types)))

  (global-prettify-symbols-mode t)
#+end_src

*** Parenthesis
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (sp-local-pair 'org-mode "$$" "$$")
    (show-smartparens-global-mode)
    (smartparens-global-mode)
    :hook (prog-mode . smartparens-strict-mode)
    ;; :hook
    ;; (after-init . (smartparens-global-strict-mode show-smartparens-global-mode))
    )

  ;; (use-package paren
  ;;   :config
  ;;   (show-paren-mode)
  ;;   (setq show-paren-delay 0
  ;;         ;; show-paren-when-point-inside-paren t
  ;;         show-paren-when-point-in-periphery t
  ;;         )
  ;;   :hook (after-init . show-paren-mode))
#+end_src

* Org
** Basics
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    ;; (org-cycle-global-at-bob t)
    (org-list-demote-modify-bullet '(("-" . "+") ("+" . "-")))
    (org-list-indent-offset 1)
    (org-return-follows-link t)
    (org-agenda-skip-deadline-prewarning-if-scheduled t)
    (org-agenda-include-diary t)
    (org-agenda-start-on-weekday nil)
    (org-agenda-files '("~/NextCloud/org"))
    (org-directory "~/NextCloud/org/")
    (org-todo-keywords '((sequence "TODO(t!)"
                                   "WIP(s!)"
                                   "WAITING(w@)"
                                   "|"
                                   "DONE(d!)"
                                   "NOT TODO(n@)"
                                   "CANCELED(c@)")))
    (org-todo-keyword-faces '(("WIP" . "orange")
                              ("WAITING" . "yellow")))
    ;; (orgtbl-mode t)
    ;; (org-hide-leading-stars t)
    ;; (org-startup-indented t)
    (org-startup-with-inline-images t)
    (org-image-actual-width 500)
    (org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    :bind
    ("C-c a"     . org-agenda)
    ("C-c l"     . org-store-link)
    ("C-c c"     . org-capture)
    ("C-c j"     . aadcg/org-checkbox-next)
    ("<mouse-1>" . aadcg/org-checkbox-next))

  (global-set-key (kbd "C-'") nil)
#+end_src

** Literate Programming
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-src-window-setup 'current-window
        org-confirm-babel-evaluate nil)

  ;; (use-package ob-ipython
  ;;   :defer t)

  ;; (use-package ob-go
  ;;   :defer t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (scheme     . t)
     (python     . t)
     ;; (ipython    . t)
     (haskell    . t)
     ;; (go         . t)
     (latex      . t)
     (shell      . t)
     (ditaa      . t)))
#+end_src

** Exports
- Ox-beamer exports org files to beamer presentation
- Minted gives syntax highlighting to latex exports
- Htmlize gives syntax highlighting to html exports

#+begin_src emacs-lisp
  (require 'ox)
  (require 'ox-beamer)
  (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
  (setq org-latex-listings 'minted)

  (use-package htmlize)
#+end_src

** Packages and Extensions
[[https://orgmode.org/worg/org-contrib/org-drill.html][tutorial]]

#+begin_src emacs-lisp
  (use-package org-drill
    :ensure t
    :config
    (require 'org-drill)
    (setq org-drill-save-buffers-after-drill-sessions-p nil
          org-drill-scope 'tree))

  (use-package org-drill-table
    :ensure t)

  ;; (use-package cdlatex
  ;;   :defer t
  ;;   :hook (org-mode . org-cdlatex-mode))

  (use-package org-pdfview
    :when window-system
    :defer t)

  (defun aadcg/org-checkbox-next ()
    "Mark checkboxes and sort."
    (interactive)
    (let ((home (point)))
      (when (org-at-item-checkbox-p)
        (org-toggle-checkbox)
        (org-sort-list nil ?x)
        (goto-char home))))

  (defun aadcg/org-replace-link-by-link-description ()
    "Replace org link by its description or url."
    (interactive)
    (if (org-in-regexp org-bracket-link-regexp 1)
        (let ((remove (list (match-beginning 0) (match-end 0)))
              (description (if (match-end 3)
                               (org-match-string-no-properties 3)
                             (org-match-string-no-properties 1))))
          (apply 'delete-region remove)
          (insert description))))

  (defun diary-last-day-of-month (date)
    "Return `t` if DATE is the last day of the month."
    (let* ((day (calendar-extract-day date))
           (month (calendar-extract-month date))
           (year (calendar-extract-year date))
           (last-day-of-month
            (calendar-last-day-of-month month year)))
      (= day last-day-of-month)))

  ;; org-cycle if tree is all checkboxes are ticked
  ;; (defun org-at-item-checkbox-p ()
  ;;   "Is point at a line starting a plain-list item with a checklet?"
  ;;   (org-list-at-regexp-after-bullet-p "\\(\\[[- X]\\]\\)[ \t]+"))
  ;; (cookie-re "\\(\\(\\[[0-9]*%\\]\\)\\|\\(\\[[0-9]*/[0-9]*\\]\\)\\)")
  ;; matches digits / same digits
  ;; \[\([0-9]*\)/\1\]

#+end_src

** Presenting
#+begin_src emacs-lisp
  (use-package org-tree-slide
    :config
    (setq org-tree-slide-slide-in-effect nil
          org-tree-slide-cursor-init nil
          org-tree-slide-never-touch-face t
          org-tree-slide-activate-message "Welcome to my presentation!"
          org-tree-slide-deactivate-message "Hope you have enjoyed!")

    (defun aadcg/presenting ()
      "Presenting mode"
      (interactive)
      (hide-mode-line-mode)
      (global-diff-hl-mode 0)
      (setq global-hl-line-mode nil)
      (auto-size-font 1))

    (defun aadcg/non-presenting ()
      "Non-presenting mode"
      (interactive)
      (setq hide-mode-line-mode t)
      (global-diff-hl-mode)
      (global-hl-line-mode)
      (auto-size-font 2))

    :hook
    ((org-tree-slide-play . aadcg/presenting)
     (org-tree-slide-stop . aadcg/non-presenting))

    :bind
    ("<f8>" . org-tree-slide-mode)
    ("<f7>" . org-tree-slide-play-with-timer)
    ("C->"  . org-tree-slide-move-next-tree)
    ("C-<"  . org-tree-slide-move-previous-tree))
#+end_src

** Look and Feel
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :custom (org-bullets-bullet-list '("Â§"))
    :hook (org-mode . org-bullets-mode))
#+end_src

* Emacs OS - The Kitchen Sink
** Guix
#+begin_src emacs-lisp
  (use-package guix
    :bind ("s-g" . guix))

  (use-package pretty-sha-path
    :ensure t)
#+end_src

** Password
#+begin_src emacs-lisp
  (use-package password-cache
    :custom (password-cache-expiry nil))
#+end_src

** Ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer
    :custom
    (ibuffer-expert t)
    (ibuffer-default-sorting-mode 'major-mode)
    :hook
    (ibuffer-mode . hl-line-mode)
    :bind (("C-x C-b" . ibuffer)))
#+end_src

** Dired
#+begin_src emacs-lisp
  (use-package dired
    :config
    (setq dired-recursive-copies 'always
          dired-recursive-deletes 'always
          delete-by-moving-to-trash t
          dired-listing-switches "-Atlh --group-directories-first"
          dired-auto-revert-buffer t)
    :hook ((dired-mode . hl-line-mode)))
#+end_src

** Checking
*** Flycheck
#+begin_src emacs-lisp
  ;; (use-package flycheck
  ;;   :init
  ;;   (global-flycheck-mode t))
#+end_src

*** Flyspell
#+begin_src emacs-lisp
  (when window-system
    (use-package flyspell
      :defer t
      :config
      (flyspell-prog-mode)))
      ;; (when org-mode-hook
      ;;   (flyspell-mode-off))))
#+end_src

** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :when window-system
    :custom (pdf-view-midnight-colors '("#d2c8c8" . "#3F3F3F"))
    ;; :config (pdf-tools-install)
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :hook
    (pdf-tools-enabled . pdf-view-midnight-minor-mode)
    (pdf-tools-enabled . pdf-view-fit-height-to-window)
    ;; (pdf-tools-enabled . pdf-view-auto-slice-minor-mode)

    ;; (pdf-tools-enable . (pdf-view-midnight-minor-mode
    ;;                      pdf-view-auto-slice-minor-mode
    ;;                      pdf-view-fit-height-to-window)
    )
#+end_src

** Expand region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=". 'er/expand-region))
#+end_src

** Emacs completion
(info "(ivy)Top")
why use swiper if there's occur?

#+begin_src emacs-lisp
  (use-package counsel
    :init
    (ivy-mode 1)
    (counsel-mode)
    :config
    (setq ivy-count-format "%d/%d "
          ivy-wrap t
          ivy-extra-directories nil
          ivy-initial-inputs-alist nil
          ivy-use-virtual-buffers t
          ;; ivy-height-alist '((t lambda (_caller) (/ (window-height) 3)))
          )
    (add-to-list 'ivy-format-functions-alist '(t . ivy-format-function-arrow))
    :bind
    ("C-s" . swiper)
    ("C-x B" . ivy-switch-buffer-other-window)
    ;; ("C-x 8" . counsel-unicode-char)
    )

  (use-package smex)
#+end_src

** Auto-complete
[[https://company-mode.github.io/][Documentation]]

#+begin_src emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    (setq company-require-match nil
          company-idle-delay 0.1
          company-selection-wrap-around t)
    (define-key company-active-map (kbd "RET") nil)
    (define-key company-active-map (kbd "<return>") nil)
    (define-key company-active-map (kbd "C-j") 'company-complete-selection)
    (define-key company-active-map (kbd "<tab>")
    'company-complete-common-or-cycle)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    ;; :hook (eshell-mode . (company-mode 0)) TODO
    )
#+end_src

** Elmacro
#+begin_src emacs-lisp
  (use-package elmacro
    :defer t)
#+end_src

** Games
#+begin_src emacs-lisp
  (use-package speed-type
    :defer t)
#+end_src

** Google Translate
#+begin_src emacs-lisp
  (use-package google-translate
    :init
    (setq google-translate-default-source-language "auto"
          google-translate-default-target-language "en")
    (require 'google-translate-default-ui)
    :bind
    ("C-c t" . google-translate-at-point)
    ("C-c T" . google-translate-query-translate))
#+end_src

** Media
Requires mpv.

#+begin_src emacs-lisp
  (use-package emms
    :config
    (require 'emms-setup)
    (emms-standard)
    (emms-default-players)
    :bind
    ("<XF86AudioPlay>" . emms-pause)
    ("<XF86AudioNext>" . emms-next)
    ("<XF86AudioPrev>" . emms-previous))
#+end_src

** Regional
*** Input Method
ÐÑÑ ÑÑÐ½Ð¾, Ð´Ð°?

#+begin_src emacs-lisp
  (load-file "/home/aadcg/repos/yeis/yeis.el")
  (load-file "/home/aadcg/repos/yeis/x-leim/robin-packages.el")
  (load-file "/home/aadcg/repos/yeis/x-leim/x-leim-list.el")

  (setq default-input-method "robin-russian"
        yeis-path-plain-word-list "/home/aadcg/repos/yeis/wordlist")
  (setq-default robin-current-package-name "robin-russian")
  (global-set-key (kbd "C-|") 'yeis-transform-previous-word)
#+end_src

*** Calendar
#+begin_src emacs-lisp
  (use-package calendar
    :config (setq calendar-week-start-day 1))
#+end_src

*** Clock
#+begin_src emacs-lisp
  (use-package time
    :config
    (setq display-time-24hr-format t
          display-time-format " %k:%M %a %d %b"
          display-time-default-load-average nil
          display-time-world-list '(("Europe/Moscow" "ÐÐ¾ÑÐºÐ²Ð°")
                                    ("Europe/Lisbon" "Lisboa"))))
#+end_src

*** Holidays
#+begin_src emacs-lisp
  (setq holiday-bahai-holidays nil
        holiday-oriental-holidays nil
        holiday-islamic-holidays nil
        holiday-hebrew-holidays nil
        holiday-christian-holidays nil

        holiday-general-holidays
        '(;; Portuguese Public Holidays
          (holiday-fixed 1 1      "Ano Novo")
          (holiday-easter-etc -47 "Carnaval")
          (holiday-easter-etc -2  "Sexta-feira Santa")
          (holiday-easter-etc 0   "Domingo de PÃ¡scoa")
          (holiday-fixed 3 19     "Dia do Pai")
          (holiday-fixed 4 25     "Dia da Liberdade")
          (holiday-fixed 5 1      "Dia do Trabalhador")
          (holiday-easter-etc +60 "Corpo de Deus")
          (holiday-float 5 0 1    "Dia da MÃ£e")
          (holiday-fixed 6 10     "Dia de Portugal, de CamÃµes e das
          Comunidades Portuguesas")
          (holiday-fixed 8 15     "AssunÃ§Ã£o de Nossa Senhora")
          (holiday-fixed 10 5     "ImplantaÃ§Ã£o da RepÃºblica")
          (holiday-fixed 11 1     "Dia de Todos-os-Santos")
          (holiday-fixed 12 1     "RestauraÃ§Ã£o da IndependÃªncia")
          (holiday-fixed 12 8     "Imaculada ConceiÃ§Ã£o")
          (holiday-fixed 12 45    "Consoada")
          (holiday-fixed 12 25    "Natal")

          ;; Russian Public Holidays
          (holiday-fixed 1 1  "ÐÐ¾Ð²ÑÐ¹ Ð³Ð¾Ð´")
          (holiday-fixed 1 2  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 1 3  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 1 4  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 1 5  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 1 6  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 1 7  "Ð Ð¾Ð¶Ð´ÐµÑÑÐ²Ð¾ Ð¥ÑÐ¸ÑÑÐ¾Ð²Ð¾")
          (holiday-fixed 1 8  "ÐÐ¾Ð²Ð¾Ð³Ð¾Ð´Ð½Ð¸Ðµ ÐºÐ°Ð½Ð¸ÐºÑÐ»Ñ")
          (holiday-fixed 2 23 "ÐÐµÐ½Ñ Ð·Ð°ÑÐ¸ÑÐ½Ð¸ÐºÐ° ÐÑÐµÑÐµÑÑÐ²Ð°")
          (holiday-fixed 3 8  "ÐÐµÐ¶Ð´ÑÐ½Ð°ÑÐ¾Ð´Ð½ÑÐ¹ Ð¶ÐµÐ½ÑÐºÐ¸Ð¹ Ð´ÐµÐ½Ñ")
          (holiday-fixed 5 1  "ÐÑÐ°Ð·Ð´Ð½Ð¸Ðº ÐÐµÑÐ½Ñ Ð¸ Ð¢ÑÑÐ´Ð°")
          (holiday-fixed 5 9  "ÐÐµÐ½Ñ ÐÐ¾Ð±ÐµÐ´Ñ")
          (holiday-fixed 6 12 "ÐÐµÐ½Ñ Ð Ð¾ÑÑÐ¸Ð¸")
          (holiday-fixed 11 4 "ÐÐµÐ½Ñ Ð½Ð°ÑÐ¾Ð´Ð½Ð¾Ð³Ð¾ ÐµÐ´Ð¸Ð½ÑÑÐ²Ð°")

          ;; American Public Holidays
          ;; (holiday-float 1 1 3 "Martin Luther King Day")
          ;; (holiday-fixed 2 2 "Groundhog Day")
          (holiday-fixed 2 14 "Valentine's Day")
          ;; (holiday-float 2 1 3 "President's Day")
          ;; (holiday-fixed 3 17 "St. Patrick's Day")
          (holiday-fixed 4 1 "April Fools' Day")
          ;; (holiday-float 5 0 2 "Mother's Day")
          ;; (holiday-float 5 1 -1 "Memorial Day")
          ;; (holiday-fixed 6 14 "Flag Day")
          ;; (holiday-float 6 0 3 "Father's Day")
          ;; (holiday-fixed 7 4 "Independence Day")
          ;; (holiday-float 9 1 1 "Labor Day")
          ;; (holiday-float 10 1 2 "Columbus Day")
          (holiday-fixed 10 31 "Halloween")
          ;; (holiday-fixed 11 11 "Veteran's Day")
          ;; (holiday-float 11 4 4 "Thanksgiving")
          )

        holiday-other-holidays
        '(;; Days Off for 2019
          ;; (holiday-fixed 12 24 "Day Off")
          ;; (holiday-fixed 12 26 "Day Off")

          ;; Company Holidays for 2019
          ;; (holiday-fixed 7 19 "Company Holiday")
          )

          holiday-local-holidays
          '(;; Porto, PT
            (holiday-fixed 6 24 "Dia de SÃ£o JoÃ£o")
            ;; Ð¡Ð°Ð½ÐºÑ-Ð¿ÐµÑÐµÑÐ±ÑÑÐ³, Ð Ð¾ÑÑÐ¸Ñ
            (holiday-fixed 1 27 "ÐÐµÐ½Ñ ÑÐ½ÑÑÐ¸Ñ Ð±Ð»Ð¾ÐºÐ°Ð´Ñ")
            (holiday-fixed 5 27 "ÐÐµÐ½Ñ Ð³Ð¾ÑÐ¾Ð´Ð°")))
#+end_src

** Man
#+begin_src emacs-lisp
  (setq Man-notify-method 'pushy)
#+end_src

** Browser (eww)
#+begin_src emacs-lisp
  (use-package shr
    :config
    (setq browse-url-browser-function 'eww-browse-url
          shr-use-fonts nil
          shr-use-colors nil
          shr-max-image-proportion 0.4
          shr-width (current-fill-column))
    (add-to-list 'eww-suggest-uris 'word-at-point t) ; remove eww-current-url
    )
#+end_src

** Telegram
#+begin_src emacs-lisp
  (use-package telega
    :unless in-termux-p
    :config
    (telega-mode-line-mode 1)
    (setq telega-chat-fill-column 70)
    :bind ("s-t" . telega))

  (use-package emojify
    :hook
    (telega-load-hook . emojify-mode)
    ;; (emojify-mode-line-mode)
    )
#+end_src

** Email (gnus)
[[https://protesilaos.com/dotemacs/#h:5ad80664-3163-4d9d-be65-462637d77903][configuring email]]
[[https://www.emacswiki.org/emacs/GnusTutorial][gnus tutorial]]

#+begin_src emacs-lisp
  (use-package gnus
    :config
    (setq gnus-inhibit-startup-message t
          gnus-interactive-exit nil)
    :hook
    (message-send . ispell-message)
    ;; :hook
    ;; (after-init . gnus)
    ;; (kill-emacs . gnus-group-exit)
    )
#+end_src

** Weather
#+begin_src emacs-lisp
  (use-package wttrin
    :config
    (setq wttrin-default-cities '("Saint Petersburg"
                                  "Porto"
                                  "Oliveira de AzemÃ©is")))
#+end_src

** Screenshots
#+begin_src emacs-lisp
  (use-package gif-screencast
    :config (setq gif-screencast-program "grim"
                  gif-screencast-args nil)
    :bind ("<f9>" . gif-screencast-start-or-stop))
#+end_src

* My Kitchen Sink
** Metaconfiguring
Visit and reload this config
#+begin_src emacs-lisp
  (defun config-visit ()
    "Visits ~/.emacs.d/config.org."
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime."
    (interactive)
    (load user-init-file))

  (global-set-key (kbd "C-c r") 'config-reload)
#+end_src

** Personal
#+begin_src emacs-lisp
  (setq user-full-name "AndrÃ© Alexandre Gomes"
        user-mail-address "andremegafone@gmail.com"
        ;; calendar-latitude 41.16
        ;; calendar-longitude -8.63
        ;; calendar-location-name "Porto, Portugal"
        calendar-latitude 59.94
        calendar-longitude 30.31
        calendar-location-name "Ð¡Ð°Ð½ÐºÑ-ÐÐµÑÐµÑÐ±ÑÑÐ³, Ð Ð¾ÑÑÐ¸Ñ")
#+end_src

** Learning Russian
- how to open in new eww buffer is one already exists?
- add method to look for the root of the work if verb if conjugated,
  adjective/noun is declinated ([[https://unix.stackexchange.com/questions/154098/copy-the-last-emacs-message-into-the-current-buffer][see]])

#+begin_src emacs-lisp
  (defun openru-search (word)
    "Search using https://en.openrussian.org"
    (interactive "MÐ§ÑÐ¾ Ð´Ð»Ñ ÐÐ°Ñ ÑÑÐ´Ð°ÑÑ? ")
    (let ((url "https://en.openrussian.org/ru/"))
      (eww (concat url word))
      (forward-line 27)))

  (defun openru-search-at-point ()
    "Search using https://en.openrussian.org at point"
    (interactive)
    (let ((url "https://en.openrussian.org/ru/"))
      (eww (concat url (current-word)))
      (set-buffer "*eww*")
      (forward-line 20)))
#+end_src

* Startup
#+begin_src emacs-lisp
  (use-package server
    :hook (after-init . server-start))

  ;; (org-agenda-list 1)
  ;; (delete-other-windows)
#+end_src
